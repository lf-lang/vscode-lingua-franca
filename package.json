{
    "name": "vscode-lingua-franca",
    "displayName": "Lingua Franca",
    "description": "Lingua Franca for Visual Studio Code. Provides lints, code completion and navigation, interactive diagrams, and more.",
    "version": "0.9.0",
    "publisher": "lf-lang",
    "icon": "images/icon.png",
    "license": "BSD-2-Clause",
    "repository": {
        "type": "git",
        "url": "https://github.com/lf-lang/vscode-lingua-franca.git"
    },
    "bugs": {
        "url": "https://github.com/lf-lang/vscode-lingua-franca/issues"
    },
    "engines": {
        "vscode": "^1.63.0"
    },
    "categories": [
        "Programming Languages"
    ],
    "keywords": [
        "reactors",
        "coordination",
        "polyglot",
        "concurrency",
        "diagrams"
    ],
    "extensionDependencies": [
        "kieler.klighd-vscode"
    ],
    "activationEvents": [
        "onLanguage:lflang"
    ],
    "main": "out/extension",
    "contributes": {
        "languages": [
            {
                "id": "lflang",
                "aliases": [
                    "Lingua Franca"
                ],
                "extensions": [
                    ".lf"
                ],
                "configuration": "./language-configuration.json"
            }
        ],
        "grammars": [
            {
                "language": "lflang",
                "scopeName": "source.lf",
                "path": "./syntaxes/lflang.tmLanguage.json",
                "embeddedLanguages": {
                    "meta.embedded.block.c": "c",
                    "meta.embedded.block.cpp": "cpp",
                    "meta.embedded.block.py": "python",
                    "meta.embedded.block.ts": "typescript"
                }
            }
        ],
        "colors": [
            {
                "id": "editorIcon.currentProject",
                "description": "Color for a TreeIteem label",
                "defaults": {
                    "dark": "#57cc99",
                    "light": "#57cc99"
                }
            }
        ],
        "semanticTokenScopes": [
            {
                "scopes": {
                    "type": [
                        "storage.type.lflang"
                    ]
                }
            }
        ],
        "commands": [
            {
                "command": "linguafranca.getAst",
                "title": "Lingua Franca: Get AST"
            },
            {
                "command": "linguafranca.getWorkspace",
                "title": "Lingua Franca: Get Workspace"
            },
            {
                "command": "linguafranca.build",
                "title": "Lingua Franca: Build"
            },
            {
                "command": "linguafranca.buildAndRun",
                "title": "Lingua Franca: Build and Run",
                "icon": "$(play)"
            },
            {
                "command": "linguafranca.checkDocker",
                "title": "Lingua Franca: Check Docker Version"
            },
            {
                "command": "linguafranca.createNewFile",
                "title": "New Lingua Franca File",
                "shortTitle": "Lingua Franca File"
            },
            {
                "command": "linguafranca.refreshEntries",
                "title": "Refresh Tree View",
                "icon": "$(refresh)"
            },
            {
                "command": "linguafranca.goToFile",
                "title": "Go To Selected File",
                "icon": "$(go-to-file)"
            },
            {
                "command": "linguafranca.importReactor",
                "title": "Import Selected Reactor",
                "icon": "$(insert)"
            },
            {
                "command": "linguafranca.openInSplitView",
                "title": "Open in Split View",
                "icon": "$(split-horizontal)"
            },
            {
                "command": "linguafranca.collapseAll",
                "title": "Collapse All",
                "icon": "$(collapse-all)"
            },
            {
                "command": "linguafranca.getVersion",
                "title": "Lingua Franca: Get Version"
            },
            {
                "command": "linguafranca.includeProject",
                "title": "Include in current project",
                "icon": "$(desktop-download)"
            },
            {
                "command": "linguafranca.goToLingoToml",
                "title": "Go to Lingo.toml",
                "icon": "$(edit)"
            },
            {
                "command": "linguafranca.openInTerminal",
                "title": "Open in Terminal",
                "icon": "$(terminal)"
            }
        ],
        "configuration": {
            "title": "LinguaFranca",
            "properties": {
                "linguafranca.generateCodeOnSave": {
                    "type": "boolean",
                    "default": true,
                    "description": "Generate code from the active Lingua Franca file when it is saved. This facilitates target language syntax checks."
                },
                "linguafranca.format.enable": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enable formatting for Lingua Franca source files."
                }
            }
        },
        "menus": {
            "editor/title": [
                {
                    "when": "resourceLangId == lflang",
                    "command": "klighd-vscode.diagram.open",
                    "group": "navigation"
                },
                {
                    "when": "resourceLangId == lflang",
                    "command": "linguafranca.buildAndRun",
                    "group": "navigation"
                }
            ],
            "editor/context": [
                {
                    "when": "resourceLangId == lflang",
                    "command": "klighd-vscode.diagram.open",
                    "group": "navigation"
                }
            ],
            "explorer/context": [
                {
                    "when": "resourceLangId == lflang",
                    "command": "klighd-vscode.diagram.open",
                    "group": "navigation"
                }
            ],
            "file/newFile": [
                {
                    "command": "linguafranca.createNewFile"
                }
            ],
            "commandPalette": [
                {
                    "command": "linguafranca.getVersion",
                    "when": "false"
                }
            ],
            "view/title": [
                {
                    "command": "linguafranca.refreshEntries",
                    "group": "navigation@1",
                    "when": "view == lf-lang-projects"
                },
                {
                    "command": "linguafranca.collapseAll",
                    "group": "navigation@2",
                    "when": "view == lf-lang-projects"
                }
            ],
            "view/item/context": [
                {
                    "command": "linguafranca.openInTerminal",
                    "group": "inline@1",
                    "when": "viewItem == project"
                },
                {
                    "command": "linguafranca.goToFile",
                    "group": "inline@2",
                    "when": "viewItem == file-local || viewItem == file-lingo || viewItem == file-local-included || viewItem == reactor || viewItem == reactor-included"
                },
                {
                    "command": "linguafranca.openInSplitView",
                    "group": "inline@3",
                    "when": "viewItem == file-local || viewItem == file-lingo || viewItem == file-local-included"
                },
                {
                    "command": "linguafranca.openInSplitView",
                    "when": "viewItem == reactor || viewItem == reactor-included"
                },
                {
                    "command": "linguafranca.importReactor",
                    "group": "inline@3",
                    "when": "viewItem == reactor-included"
                },
                {
                    "command": "linguafranca.goToLingoToml",
                    "group": "inline",
                    "when": "viewItem == lingo"
                }
            ]
        },
        "viewsContainers": {
            "activitybar": [
                {
                    "id": "lf-lang",
                    "title": "Lingua Franca Package Explorer",
                    "icon": "images/logo/lf-logo-dark.svg"
                }
            ]
        },
        "views": {
            "lf-lang": [
                {
                    "id": "lf-lang-projects",
                    "name": ""
                }
            ]
        },
        "viewsWelcome": [
            {
                "view": "lf-lang-projects",
                "contents": "No Lingua Franca project found. [Learn more](https://www.lf-lang.org/docs/tools/code-extension) about setting up a Lingua Franca project structure.\n[Open Lingua Franca Project](command:linguafranca.openFolder)"
            }
        ]
    },
    "devDependencies": {
        "@types/chai": "^4.3.1",
        "@types/chai-spies": "^1.0.0",
        "@types/mocha": "^9.1.1",
        "@types/node": "^18.0.0",
        "@types/rimraf": "^3.0.2",
        "@types/vscode": "^1.49.0",
        "@types/which": "^2.0.1",
        "@vscode/test-electron": "^2.3.9",
        "@vscode/vsce": "^2.21.0",
        "chai": "^4.3.4",
        "chai-spies": "^1.0.0",
        "colorette": "^2.0.16",
        "commander": "^8.3.0",
        "glob": "^8.0.3",
        "maven": "^5.0.0",
        "mocha": "^10.0.0",
        "move-cli": "^2.0.0",
        "node": "^18.13.0",
        "node-fetch": "^3.3.1",
        "path": "^0.12.7",
        "rimraf": "^3.0.2",
        "simple-git": "^3.7.1",
        "ts-loader": "^9.5.1",
        "ts-node": "^10.9.1",
        "typescript": "^4.6.4",
        "url-exist": "^3.0.0",
        "vscode-oniguruma": "^1.7.0",
        "vscode-textmate": "^9.0.0",
        "webpack": "^5.91.0",
        "webpack-cli": "^5.1.4",
        "which": "^2.0.2"
    },
    "dependencies": {
        "lfwasm": "file:lfw-pkg",
        "vscode-languageclient": "^6.1.3"
    },
    "scripts": {
        "clean": "rimraf out && rimraf lib && rimraf lingua-franca/lsp/build && rimraf vscode-lingua-franca-*.vsix",
        "transpile": "webpack",
        "vscode:prepublish": "npm run compile",
        "compile": "cd ./editor-support/lfwasm && make && cd ../.. && rimraf ./lfw-pkg && move-cli ./editor-support/lfwasm/pkg ./lfw-pkg && bash ./write-version-to-file.sh src/extension_version.ts && npm run transpile",
        "watch": "npm run transpile --watch",
        "build": "npx ts-node src/build_lds.ts",
        "compile-tests": "npm run compile && npx tsc --lib \"dom\" --outDir out/test --inlineSourceMap",
        "package": "move-cli lingua-franca ../temp-lingua-franca89539275 && (vsce package; move-cli ../temp-lingua-franca89539275 lingua-franca)",
        "package-pre-release": "move-cli lingua-franca ../temp-lingua-franca89539275 && (vsce package --pre-release; move-cli ../temp-lingua-franca89539275 lingua-franca)",
        "deploy": "echo \"Y\r\n\" | code --install-extension vscode-lingua-franca-*.vsix --force",
        "install-extension": "npm run clean && npm run build && npm run package && npm run deploy",
        "test": "npm run compile-tests && node ./out/test/test/test_runner.js --dependencies=present",
        "test-dependencies-outdated": "bash -c \"if [ -z ${LF_VS_CODE_ALLOW_GLOBAL_UNINSTALLS+x} ]; then echo 'If you are sure that you want to run a test which may uninstall binaries from your machine, set the environment variable LF_VS_CODE_ALLOW_GLOBAL_UNINSTALLS' ; else false; fi\" || npm run compile-tests && rustup default 1.26.0 && node ./out/test/test/test_runner.js --dependencies=outdated;",
        "test-dependencies-missing-basic": "bash -c \"if [ -z ${LF_VS_CODE_ALLOW_GLOBAL_UNINSTALLS+x} ]; then echo 'If you are sure that you want to run a test which may uninstall binaries from your machine, set the environment variable LF_VS_CODE_ALLOW_GLOBAL_UNINSTALLS' ; else false; fi\" || npm run compile-tests && (move-cli $INIT_CWD/../../../.cargo $INIT_CWD/../../../.cargo.bak || move-cli C:\\Users\\runneradmin\\.cargo C:\\Users\\runneradmin\\.cargo.bak) && node ./out/test/test/test_runner.js --dependencies=missing0",
        "test-dependencies-missing-extended": "bash -c \"if [ -z ${LF_VS_CODE_ALLOW_GLOBAL_UNINSTALLS+x} ]; then echo 'If you are sure that you want to run a test which may uninstall binaries from your machine, set the environment variable LF_VS_CODE_ALLOW_GLOBAL_UNINSTALLS' ; else false; fi\" || npm run compile-tests && (move-cli $INIT_CWD/../../../.cargo $INIT_CWD/../../../.cargo.bak || move-cli C:\\Users\\runneradmin\\.cargo C:\\Users\\runneradmin\\.cargo.bak) && node ./out/test/test/test_runner.js --dependencies=missing1",
        "test-syntax": "npm run compile-tests && npx mocha out/test/test/check_highlighting.test.js --ui tdd --reporter-option maxDiffSize=0",
        "update-known-good": "rm -rf test/known-good && npm run compile-tests && npx mocha out/test/test/check_highlighting.test.js --ui tdd",
        "amend-jar": "./uf.py"
    }
}
