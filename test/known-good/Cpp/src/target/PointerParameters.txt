<span class="source-lf comment-line-double-dash-lflang">// This is a smoke test to see if pointers can be used as parameters.</span>
<span class="source-lf comment-line-double-dash-lflang">// Compilation without errors is success.</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">Cpp</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Foo</span><span class="source-lf">(ptr:</span><span class="source-lf storage-type-lflang"> int</span><span class="source-lf keyword-operator-lflang">*</span><span class="source-lf">{{</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> nullptr </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}}) {</span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">startup</span><span class="source-lf">) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        if (ptr </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> nullptr || </span><span class="source-lf keyword-operator-lflang">*</span><span class="source-lf">ptr !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">42</span><span class="source-lf">) {</span>
<span class="source-lf">            </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-constant-reactorinstance-lflang">log</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">Error</span><span class="source-lf">() << </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">received an unexpected value!</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">;</span>
<span class="source-lf">            exit(</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">);</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">main</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">private</span><span class="source-lf"> </span><span class="source-lf keyword-control-lflang">preamble</span><span class="source-lf"> {</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> int a{</span><span class="source-lf constant-numeric-int-lflang">42</span><span class="source-lf">}; </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">foo</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Foo</span><span class="source-lf">(ptr </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> {</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> &a </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">})</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
