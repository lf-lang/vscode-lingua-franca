<span class="source-lf comment-line-double-dash-lflang">// This test simply checks if combined type names consisting of multiple words</span>
<span class="source-lf comment-line-double-dash-lflang">// (such as `unsigned int`) can be used correctly in LF code.</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">Cpp</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Foo</span><span class="source-lf">(</span>
<span class="source-lf">    bar: {</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> unsigned int </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">),</span>
<span class="source-lf">    baz: {</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">const</span><span class="source-lf"> unsigned int</span><span class="source-lf keyword-operator-lflang">*</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}({</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> nullptr </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">})</span>
<span class="source-lf">) {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf meta-embedded-block-cpp"> s_bar:</span><span class="source-lf meta-embedded-block-cpp"> </span><span class="source-lf">{</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> unsigned int </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}(bar)</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf meta-embedded-block-cpp"> s_baz:</span><span class="source-lf meta-embedded-block-cpp"> </span><span class="source-lf">{</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">const</span><span class="source-lf"> unsigned int</span><span class="source-lf keyword-operator-lflang">*</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}(baz)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">startup</span><span class="source-lf">) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        if (bar !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">42</span><span class="source-lf"> || s_bar !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">42</span><span class="source-lf"> || </span><span class="source-lf keyword-operator-lflang">*</span><span class="source-lf">baz !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">42</span><span class="source-lf"> || </span><span class="source-lf keyword-operator-lflang">*</span><span class="source-lf">s_baz !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">42</span><span class="source-lf">) {</span>
<span class="source-lf">            </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-constant-reactorinstance-lflang">log</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">Error</span><span class="source-lf">() << </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Unexpected value!</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">;</span>
<span class="source-lf">            exit(</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">);</span>
<span class="source-lf">                    }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">main</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf">(bar: {</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> unsigned int </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}(</span><span class="source-lf constant-numeric-int-lflang">42</span><span class="source-lf">)) {</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">foo</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Foo</span><span class="source-lf">(bar </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> bar, baz </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> {</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> &bar </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">})</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
