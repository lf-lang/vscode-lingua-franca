<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">Cpp</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Foo</span><span class="source-lf"><T>(bar:</span><span class="source-lf entity-name-type-lflang"> T</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">), expected:</span><span class="source-lf entity-name-type-lflang"> T</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">14542135</span><span class="source-lf">)) {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf meta-embedded-block-cpp"> baz:</span><span class="source-lf meta-embedded-block-cpp entity-name-type-lflang"> T</span><span class="source-lf meta-embedded-block-cpp">(</span><span class="source-lf">bar)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">startup</span><span class="source-lf">) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        if (bar !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> expected) {</span>
<span class="source-lf">          </span><span class="source-lf variable-other-constant-reactorinstance-lflang">std</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">cerr</span><span class="source-lf"> << </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">ERROR: Expected baz=</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf"> << expected << </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang"> but got baz=</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf"> << bar << </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf">;</span>
<span class="source-lf">          exit(</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">);</span>
<span class="source-lf">        }</span>
<span class="source-lf">        if (baz !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> expected) {</span>
<span class="source-lf">          </span><span class="source-lf variable-other-constant-reactorinstance-lflang">std</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">cerr</span><span class="source-lf"> << </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">ERROR: Expected baz=</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf"> << expected << </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang"> but got baz=</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf"> << baz << </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf">;</span>
<span class="source-lf">          exit(</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">);</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">main</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">foo</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Foo</span><span class="source-lf"><int>(bar </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">42</span><span class="source-lf">, expected </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">42</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">bar</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Foo</span><span class="source-lf"><int>(expected </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">)  </span><span class="source-lf comment-line-double-dash-lflang">// default value is used</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
