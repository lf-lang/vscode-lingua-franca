<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">Cpp</span>
<span class="source-lf"></span>
<span class="source-lf comment-line-double-dash-lflang">// This test verifies that floating-point literals are handled correctly.</span>
<span class="source-lf storage-modifier-lflang">main</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf meta-embedded-block-cpp"> N:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> double</span><span class="source-lf meta-embedded-block-cpp">(</span><span class="source-lf constant-numeric-float-lflang">6.0221409e+23</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf meta-embedded-block-cpp"> charge:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> double</span><span class="source-lf meta-embedded-block-cpp">(</span><span class="source-lf keyword-operator-lflang">-</span><span class="source-lf constant-numeric-float-lflang">1.6021766E-19</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf meta-embedded-block-cpp"> minus_epsilon:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> double</span><span class="source-lf meta-embedded-block-cpp">(</span><span class="source-lf keyword-operator-lflang">-</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">01e0)</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf meta-embedded-block-cpp"> expected:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> double</span><span class="source-lf meta-embedded-block-cpp">(</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">964853323188E5)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">startup</span><span class="source-lf">) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        auto F </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-</span><span class="source-lf"> N </span><span class="source-lf keyword-operator-lflang">*</span><span class="source-lf"> charge;</span>
<span class="source-lf">        if (</span><span class="source-lf variable-other-constant-reactorinstance-lflang">std</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">abs</span><span class="source-lf">(F </span><span class="source-lf keyword-operator-lflang">-</span><span class="source-lf"> expected) < </span><span class="source-lf variable-other-constant-reactorinstance-lflang">std</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">abs</span><span class="source-lf">(minus_epsilon)) {</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">std</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">cout</span><span class="source-lf"> << </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">The Faraday constant is roughly </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf"> << F << </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">.</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">;</span>
<span class="source-lf">        } else {</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">std</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">cerr</span><span class="source-lf"> << </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">ERROR: Expected </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf"> << expected</span>
<span class="source-lf">                << </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang"> but computed </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf"> << F << </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">.</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">;</span>
<span class="source-lf">            exit(</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">);</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
