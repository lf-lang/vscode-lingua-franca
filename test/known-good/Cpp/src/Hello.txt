<span class="source-lf comment-line-double-dash-lflang">// This test checks that logical time is incremented an appropriate amount as a</span>
<span class="source-lf comment-line-double-dash-lflang">// result of an invocation of the schedule() function at runtime. It also</span>
<span class="source-lf comment-line-double-dash-lflang">// performs various smoke tests of timing aligned reactions. The first instance</span>
<span class="source-lf comment-line-double-dash-lflang">// has a period of 4 seconds, the second of 2 seconds, and the third (composite)</span>
<span class="source-lf comment-line-double-dash-lflang">// or 1 second.</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">Cpp</span><span class="source-lf meta-targetspec-lflang"> {</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">    timeout</span><span class="source-lf meta-targetspec-lflang">: </span><span class="source-lf meta-targetspec-lflang constant-numeric-int-lflang">10</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-numeric-lflang">sec</span><span class="source-lf meta-targetspec-lflang">,</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">    fast</span><span class="source-lf meta-targetspec-lflang">: </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">true</span>
<span class="source-lf meta-targetspec-lflang">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">HelloCpp</span><span class="source-lf">(period:</span><span class="source-lf storage-type-lflang"> time</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">sec</span><span class="source-lf">), message: {</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">std</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">string</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Hello C++</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">)) {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf meta-embedded-block-cpp"> count:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> int</span><span class="source-lf meta-embedded-block-cpp">(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf meta-embedded-block-cpp"> previous_time:</span><span class="source-lf meta-embedded-block-cpp"> </span><span class="source-lf">{</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">TimePoint</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">timer</span><span class="source-lf"> t(</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">sec</span><span class="source-lf">, period)</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">logical</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">action</span><span class="source-lf meta-embedded-block-cpp"> a:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> void</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(t) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> a {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">std</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">cout</span><span class="source-lf"> << message << </span><span class="source-lf variable-other-constant-reactorinstance-lflang">std</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">endl</span><span class="source-lf">;</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">a</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">schedule</span><span class="source-lf">(200ms); </span><span class="source-lf comment-line-double-dash-lflang">// No payload.</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// Print the current time.</span>
<span class="source-lf">        previous_time </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> get_logical_time();</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">std</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">cout</span><span class="source-lf"> << </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Current time is </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf"> << previous_time << </span><span class="source-lf variable-other-constant-reactorinstance-lflang">std</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">endl</span><span class="source-lf">;</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(a) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        count</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf">;</span>
<span class="source-lf">        auto </span><span class="source-lf storage-type-lflang">time</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> get_logical_time();</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">std</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">cout</span><span class="source-lf"> << </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">***** action </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf"> << count << </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang"> at time </span><span class="source-lf string-quoted-double-lflang">"</span>
<span class="source-lf">                   << </span><span class="source-lf storage-type-lflang">time</span><span class="source-lf"> << </span><span class="source-lf variable-other-constant-reactorinstance-lflang">std</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">endl</span><span class="source-lf">;</span>
<span class="source-lf">        auto diff </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf storage-type-lflang">time</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-</span><span class="source-lf"> previous_time;</span>
<span class="source-lf">        if (diff !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> 200ms) {</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">std</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">cerr</span><span class="source-lf"> << </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">FAILURE: Expected 200 msecs of logical time to elapse </span><span class="source-lf string-quoted-double-lflang">"</span>
<span class="source-lf">                      << </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">but got </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf"> << diff << </span><span class="source-lf variable-other-constant-reactorinstance-lflang">std</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">endl</span><span class="source-lf">;</span>
<span class="source-lf">            exit(</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">);</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Inside</span><span class="source-lf">(</span>
<span class="source-lf">    period:</span><span class="source-lf storage-type-lflang"> time</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">sec</span><span class="source-lf">),</span>
<span class="source-lf">    message:</span><span class="source-lf storage-type-lflang"> std</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">string</span><span class="source-lf">(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Composite default message.</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">)</span>
<span class="source-lf">) {</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">third_instance</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">HelloCpp</span><span class="source-lf">(period </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> period, message </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> message)</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">main</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Hello</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">first_instance</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">HelloCpp</span><span class="source-lf">(</span>
<span class="source-lf">        period </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">4</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">sec</span><span class="source-lf">,</span>
<span class="source-lf">        message </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Hello from first_instance.</span><span class="source-lf string-quoted-double-lflang">"</span>
<span class="source-lf">    )</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">second_instance</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">HelloCpp</span><span class="source-lf">(message </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Hello from second_instance.</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">composite_instance</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Inside</span><span class="source-lf">(message </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Hello from composite_instance.</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">)</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
