<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">Cpp</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Foo</span><span class="source-lf">(a:</span><span class="source-lf storage-type-lflang"> size_t</span><span class="source-lf">{</span><span class="source-lf constant-numeric-int-lflang">8</span><span class="source-lf">}, b:</span><span class="source-lf storage-type-lflang"> size_t</span><span class="source-lf">{</span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf">}) {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf">[{</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> a</span><span class="source-lf keyword-operator-lflang">*</span><span class="source-lf">b </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}] in:</span><span class="source-lf storage-type-lflang"> size_t</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">output</span><span class="source-lf">[{</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> a</span><span class="source-lf keyword-operator-lflang">/</span><span class="source-lf">b </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}] out:</span><span class="source-lf storage-type-lflang"> size_t</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">startup</span><span class="source-lf">) in </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> out {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        if (</span><span class="source-lf variable-other-constant-reactorinstance-lflang">in</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">size</span><span class="source-lf">() !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> a</span><span class="source-lf keyword-operator-lflang">*</span><span class="source-lf">b) {</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">std</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">cerr</span><span class="source-lf"> << </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">ERROR: expected in to have a width of </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf"> << a</span><span class="source-lf keyword-operator-lflang">*</span><span class="source-lf">b << </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf">;</span>
<span class="source-lf">            exit(</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">);</span>
<span class="source-lf">        }</span>
<span class="source-lf">        if (</span><span class="source-lf variable-other-constant-reactorinstance-lflang">out</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">size</span><span class="source-lf">() !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> a</span><span class="source-lf keyword-operator-lflang">/</span><span class="source-lf">b) {</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">std</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">cerr</span><span class="source-lf"> << </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">ERROR: expected out to have a width of </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf"> << a</span><span class="source-lf keyword-operator-lflang">/</span><span class="source-lf">b << </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf">;</span>
<span class="source-lf">            exit(</span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf">);</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">main</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">foo1</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Foo</span><span class="source-lf">()</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">foo2</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Foo</span><span class="source-lf">(a </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">10</span><span class="source-lf">, b </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">3</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">foo3</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Foo</span><span class="source-lf">(a </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">9</span><span class="source-lf">, b </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">9</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">foo_bank</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf">[{</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">42</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}] Foo()</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">startup</span><span class="source-lf">) </span><span class="source-lf variable-other-constant-reactorinstance-lflang">foo_bank</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">out</span><span class="source-lf"> {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        if (</span><span class="source-lf variable-other-constant-reactorinstance-lflang">foo_bank</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">size</span><span class="source-lf">() !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">42</span><span class="source-lf">) {</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">std</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">cerr</span><span class="source-lf"> << </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">ERROR: expected foo_bank to have a width of </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf"> << </span><span class="source-lf constant-numeric-int-lflang">42</span><span class="source-lf"> << </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf">;</span>
<span class="source-lf">            exit(</span><span class="source-lf constant-numeric-int-lflang">3</span><span class="source-lf">);</span>
<span class="source-lf">        }</span>
<span class="source-lf">        for (auto& foo :</span><span class="source-lf storage-type-lflang"> foo_bank</span><span class="source-lf">) {</span>
<span class="source-lf">            if (</span><span class="source-lf variable-other-constant-reactorinstance-lflang">foo</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-constant-reactorinstance-lflang">out</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">size</span><span class="source-lf">() !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">4</span><span class="source-lf">) {</span>
<span class="source-lf">                </span><span class="source-lf variable-other-constant-reactorinstance-lflang">std</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">cerr</span><span class="source-lf"> << </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">ERROR: expected foo_bank.out to have a width of </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf"> << </span><span class="source-lf constant-numeric-int-lflang">4</span><span class="source-lf"> << </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf">;</span>
<span class="source-lf">                exit(</span><span class="source-lf constant-numeric-int-lflang">4</span><span class="source-lf">);</span>
<span class="source-lf">            }</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
