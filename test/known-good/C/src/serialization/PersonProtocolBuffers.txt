<span class="source-lf comment-block-lflang">/**</span>
<span class="source-lf comment-block-lflang"> * This example demonstrates a very simple use of protocol buffers within a</span>
<span class="source-lf comment-block-lflang"> * reactor. It encodes and decodes a very simple protocol buffer definition in</span>
<span class="source-lf comment-block-lflang"> * Person.proto. This reactor is heavily based on the examples at</span>
<span class="source-lf comment-block-lflang"> * https://github.com/protobuf-c/protobuf-c/wiki/Examples. This example just</span>
<span class="source-lf comment-block-lflang"> * packs and unpacks a message.</span>
<span class="source-lf comment-block-lflang"> *</span>
<span class="source-lf comment-block-lflang"> * To run this example first install the protocol buffers compiler from</span>
<span class="source-lf comment-block-lflang"> * https://github.com/protocolbuffers/protobuf. It is also available from</span>
<span class="source-lf comment-block-lflang"> * homebrew on a Mac via</span>
<span class="source-lf comment-block-lflang"> *</span>
<span class="source-lf comment-block-lflang"> * $ brew install protobuf</span>
<span class="source-lf comment-block-lflang"> *</span>
<span class="source-lf comment-block-lflang"> * Building protobuf from source is slow, so avoid doing that if possible. Next</span>
<span class="source-lf comment-block-lflang"> * install the C plugin for protocol buffers from</span>
<span class="source-lf comment-block-lflang"> *</span>
<span class="source-lf comment-block-lflang"> * https://github.com/protobuf-c/protobuf-c</span>
<span class="source-lf comment-block-lflang"> *</span>
<span class="source-lf comment-block-lflang"> * The code generator assumes that executables are installed within the PATH. On</span>
<span class="source-lf comment-block-lflang"> * a Mac, this is typically at /usr/local/bin.</span>
<span class="source-lf comment-block-lflang"> </span><span class="source-lf comment-block-lflang">*/</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">C</span><span class="source-lf meta-targetspec-lflang"> {</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">    protobufs</span><span class="source-lf meta-targetspec-lflang">: </span><span class="source-lf meta-targetspec-lflang variable-other-constant-reactorinstance-lflang">Person</span><span class="source-lf meta-targetspec-lflang keyword-operator-lflang">.</span><span class="source-lf meta-targetspec-lflang variable-other-lflang">proto</span>
<span class="source-lf meta-targetspec-lflang">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">main</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">startup</span><span class="source-lf">) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        Person person </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> PERSON__INIT; </span><span class="source-lf comment-line-double-dash-lflang">// Macro to create the protocol buffer</span>
<span class="source-lf">        uint8_t</span><span class="source-lf keyword-operator-lflang">*</span><span class="source-lf"> buffer;              </span><span class="source-lf comment-line-double-dash-lflang">// Buffer to store the serialized data</span>
<span class="source-lf">        unsigned len;                 </span><span class="source-lf comment-line-double-dash-lflang">// Length of the packed message</span>
<span class="source-lf"></span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">person</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">name</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Lingua Franca</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">;</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">person</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">id</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">;</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">person</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">email</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">eal@berkeley.edu</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">;</span>
<span class="source-lf"></span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// Pack the message into buffer.</span>
<span class="source-lf">        len </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> person__get_packed_size(&person);</span>
<span class="source-lf">        buffer </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> (uint8_t</span><span class="source-lf keyword-operator-lflang">*</span><span class="source-lf">)malloc(len);</span>
<span class="source-lf">        person__pack(&person, buffer);</span>
<span class="source-lf"></span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// Now unpack the message from buffer.</span>
<span class="source-lf">        Person </span><span class="source-lf keyword-operator-lflang">*</span><span class="source-lf">unpacked </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> person__unpack(NULL, len, buffer);</span>
<span class="source-lf"></span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// Extract and print the unpacked message.</span>
<span class="source-lf">        printf(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Name: %s</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">, unpacked</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">name);</span>
<span class="source-lf">        free(buffer);                        </span><span class="source-lf comment-line-double-dash-lflang">// Free the allocated serialized buffer</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
