<span class="source-lf comment-block-lflang">/**</span>
<span class="source-lf comment-block-lflang"> * Distributed LF program where a MessageGenerator creates a string message that</span>
<span class="source-lf comment-block-lflang"> * is sent via the RTI (runtime infrastructure) to a receiver that prints the</span>
<span class="source-lf comment-block-lflang"> * message. The type is char*, so this tests the transport of token-encapsulated</span>
<span class="source-lf comment-block-lflang"> * messages. Three executable programs are generated, Distributed,</span>
<span class="source-lf comment-block-lflang"> * Distributed_Sender, and Distributed_Receiver. The RTI is realized in the</span>
<span class="source-lf comment-block-lflang"> * first of these and is identified as a "launcher," so it launches the other</span>
<span class="source-lf comment-block-lflang"> * two programs.</span>
<span class="source-lf comment-block-lflang"> *</span>
<span class="source-lf comment-block-lflang"> * This program uses a 'logical' connection -> with a STP violation handler,</span>
<span class="source-lf comment-block-lflang"> * decentralized coordination, and an 'after' that is sufficiently large to get</span>
<span class="source-lf comment-block-lflang"> * deterministic timestamps. Hence, it realizes a 'poor man's Ptides' that does</span>
<span class="source-lf comment-block-lflang"> * not require clock synchronization nor HLA-style centralized control over the</span>
<span class="source-lf comment-block-lflang"> * advancement of time.</span>
<span class="source-lf comment-block-lflang"> *</span>
<span class="source-lf comment-block-lflang"> * @author Edward A. Lee</span>
<span class="source-lf comment-block-lflang"> </span><span class="source-lf comment-block-lflang">*/</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">C</span><span class="source-lf meta-targetspec-lflang"> {</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">    timeout</span><span class="source-lf meta-targetspec-lflang">: </span><span class="source-lf meta-targetspec-lflang constant-numeric-int-lflang">5</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-numeric-lflang">secs</span><span class="source-lf meta-targetspec-lflang">,</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">    coordination</span><span class="source-lf meta-targetspec-lflang">: decentralized</span>
<span class="source-lf meta-targetspec-lflang">}</span>
<span class="source-lf"></span>
<span class="source-lf comment-block-lflang">/**</span>
<span class="source-lf comment-block-lflang"> * Reactor that generates a sequence of messages, one per second. The message</span>
<span class="source-lf comment-block-lflang"> * will be a string consisting of a root string followed by a count.</span>
<span class="source-lf comment-block-lflang"> * @param root The root string.</span>
<span class="source-lf comment-block-lflang"> * @output message The message.</span>
<span class="source-lf comment-block-lflang"> </span><span class="source-lf comment-block-lflang">*/</span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">MessageGenerator</span><span class="source-lf">(root:</span><span class="source-lf storage-type-lflang"> string</span><span class="source-lf">(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">)) {</span>
<span class="source-lf comment-line-double-dash-lflang">    </span><span class="source-lf comment-line-double-dash-lflang">// Output type char* instead of string is used for dynamically allocated</span>
<span class="source-lf comment-line-double-dash-lflang">    </span><span class="source-lf comment-line-double-dash-lflang">// character arrays (as opposed to static constant strings).</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">output</span><span class="source-lf meta-embedded-block-cpp"> message:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> char</span><span class="source-lf meta-embedded-block-cpp">*</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf meta-embedded-block-cpp"> count:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> int</span><span class="source-lf meta-embedded-block-cpp">(</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">)</span>
<span class="source-lf comment-line-double-dash-lflang">    </span><span class="source-lf comment-line-double-dash-lflang">// Send first message after 1 sec so that the startup reactions do not</span>
<span class="source-lf comment-line-double-dash-lflang">    </span><span class="source-lf comment-line-double-dash-lflang">// factor into the transport time measurement on the first message.</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">timer</span><span class="source-lf"> t(</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">sec</span><span class="source-lf">, </span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">sec</span><span class="source-lf">)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(t) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> message {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// With NULL, 0 arguments, snprintf tells us how many bytes are needed.</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// Add one for the null terminator.</span>
<span class="source-lf">        int length </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> snprintf(NULL, </span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">, </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">%s %d</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">, self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">root, self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">count) </span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">;</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// Dynamically allocate memory for the output.</span>
<span class="source-lf">        SET_NEW_ARRAY(message, length);</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// Populate the output string and increment the count.</span>
<span class="source-lf">        snprintf(message</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value, length, </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">%s %d</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">, self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">root, self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">count</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf">);</span>
<span class="source-lf">        printf(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">MessageGenerator: At time %lld, send message: %s</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">,</span>
<span class="source-lf">            lf_time_logical_elapsed(),</span>
<span class="source-lf">            message</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value</span>
<span class="source-lf">        );</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf comment-block-lflang">/**</span>
<span class="source-lf comment-block-lflang"> * Reactor that prints an incoming string.</span>
<span class="source-lf comment-block-lflang"> * @param prefix A prefix for the message.</span>
<span class="source-lf comment-block-lflang"> * @input message The message.</span>
<span class="source-lf comment-block-lflang"> </span><span class="source-lf comment-block-lflang">*/</span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">PrintMessage</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf meta-embedded-block-cpp"> message:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> char</span><span class="source-lf meta-embedded-block-cpp">*</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf meta-embedded-block-cpp"> count:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> int</span><span class="source-lf meta-embedded-block-cpp">(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(message) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        printf(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">PrintMessage: At (elapsed) logical time %lld, receiver receives: %s</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">,</span>
<span class="source-lf">            lf_time_logical_elapsed(),</span>
<span class="source-lf">            message</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value</span>
<span class="source-lf">        );</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// Check the trailing number only of the message.</span>
<span class="source-lf">        self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">count</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf">;</span>
<span class="source-lf">        int trailing_number </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> atoi(&message</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value[</span><span class="source-lf constant-numeric-int-lflang">12</span><span class="source-lf">]);</span>
<span class="source-lf">        if (trailing_number !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">count) {</span>
<span class="source-lf">            printf(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">ERROR: Expected message to be 'Hello World %d'.</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">, self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">count);</span>
<span class="source-lf">            exit(</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">);</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">} </span><span class="source-lf keyword-control-lflang">STP</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        printf(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">PrintMessage: At (elapsed) tag (%lld, %u), receiver receives: %s</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-double-lflang">"</span>
<span class="source-lf">            </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Original intended tag was (%lld, %u).</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">,</span>
<span class="source-lf">            lf_time_logical_elapsed(),</span>
<span class="source-lf">            lf_tag()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">microstep,</span>
<span class="source-lf">            message</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value,</span>
<span class="source-lf">            message</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf variable-other-constant-reactorinstance-lflang">intended_tag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf storage-type-lflang">time</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-</span><span class="source-lf"> lf_time_start(),</span>
<span class="source-lf">            message</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf variable-other-constant-reactorinstance-lflang">intended_tag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">microstep</span><span class="source-lf">);</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// Check the trailing number only of the message.</span>
<span class="source-lf">        self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">count</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf">;</span>
<span class="source-lf">        int trailing_number </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> atoi(&message</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value[</span><span class="source-lf constant-numeric-int-lflang">12</span><span class="source-lf">]);</span>
<span class="source-lf">        if (trailing_number !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">count) {</span>
<span class="source-lf">            printf(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">ERROR: Expected message to be 'Hello World %d'.</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">, self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">count);</span>
<span class="source-lf">            exit(</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">);</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">shutdown</span><span class="source-lf">) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        if (self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">count </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">) {</span>
<span class="source-lf">            printf(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">ERROR: No messages received.</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">);</span>
<span class="source-lf">            exit(</span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf">);</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">federated</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">DistributedToken</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">msg</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">MessageGenerator</span><span class="source-lf">(root </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Hello World</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">dsp</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">PrintMessage</span><span class="source-lf">()</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">msg</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">message</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">dsp</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">message</span><span class="source-lf"> </span><span class="source-lf keyword-control-lflang">after</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">40</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
