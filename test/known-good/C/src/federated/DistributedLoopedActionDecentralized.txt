<span class="source-lf comment-block-lflang">/**</span>
<span class="source-lf comment-block-lflang"> * Test a sender-receiver network system that relies on microsteps being taken</span>
<span class="source-lf comment-block-lflang"> * into account. The purpose of this test is to check whether the</span>
<span class="source-lf comment-block-lflang"> * functionalities pertinent to dynamic STP offset adjustments are present and</span>
<span class="source-lf comment-block-lflang"> * functioning to a degree.</span>
<span class="source-lf comment-block-lflang"> *</span>
<span class="source-lf comment-block-lflang"> * This version of the test does not use a centralized coordinator to advance</span>
<span class="source-lf comment-block-lflang"> * tag. Therefore, the receiver will rely on an STP offset (initially zero) to</span>
<span class="source-lf comment-block-lflang"> * wait long enough for messages to arrive before advancing its tag. In this</span>
<span class="source-lf comment-block-lflang"> * test, the STP offset is initially zero and gradually raised every time an STP</span>
<span class="source-lf comment-block-lflang"> * violation is perceived until no STP violation is observed. Therefore, the</span>
<span class="source-lf comment-block-lflang"> * exact outcome of the test will depend on actual runtime timing.</span>
<span class="source-lf comment-block-lflang"> *</span>
<span class="source-lf comment-block-lflang"> * @author Soroush Bateni</span>
<span class="source-lf comment-block-lflang"> </span><span class="source-lf comment-block-lflang">*/</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">C</span><span class="source-lf meta-targetspec-lflang"> {</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">    timeout</span><span class="source-lf meta-targetspec-lflang">: </span><span class="source-lf meta-targetspec-lflang constant-numeric-int-lflang">1</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-numeric-lflang">sec</span><span class="source-lf meta-targetspec-lflang">,</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">    coordination</span><span class="source-lf meta-targetspec-lflang">: decentralized</span>
<span class="source-lf meta-targetspec-lflang">}</span>
<span class="source-lf"></span>
<span class="source-lf keyword-control-import-lflang">import</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Sender</span><span class="source-lf"> </span><span class="source-lf keyword-control-import-lflang">from</span><span class="source-lf"> </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">../lib/LoopedActionSender.lf</span><span class="source-lf string-quoted-double-lflang">"</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Receiver</span><span class="source-lf">(take_a_break_after:</span><span class="source-lf storage-type-lflang"> int</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">10</span><span class="source-lf">), break_interval:</span><span class="source-lf storage-type-lflang"> time</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">400</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">)) {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf meta-embedded-block-cpp"> in:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> int</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf meta-embedded-block-cpp"> received_messages:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> int</span><span class="source-lf meta-embedded-block-cpp">(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf meta-embedded-block-cpp"> total_received_messages:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> int</span><span class="source-lf meta-embedded-block-cpp">(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf meta-embedded-block-cpp"> breaks:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> int</span><span class="source-lf meta-embedded-block-cpp">(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(in) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        tag_t current_tag </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> lf_tag();</span>
<span class="source-lf">        lf_print(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">At tag (%lld, %u) received value %d with STP violation (%lld, %u).</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">,</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">current_tag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf storage-type-lflang">time</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-</span><span class="source-lf"> lf_time_start(),</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">current_tag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">microstep</span><span class="source-lf">,</span>
<span class="source-lf">            in</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value,</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">current_tag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf storage-type-lflang">time</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-</span><span class="source-lf"> in</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf variable-other-constant-reactorinstance-lflang">intended_tag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf storage-type-lflang">time</span><span class="source-lf">,</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">current_tag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">microstep</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-</span><span class="source-lf"> in</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf variable-other-constant-reactorinstance-lflang">intended_tag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">microstep</span>
<span class="source-lf">        );</span>
<span class="source-lf">        self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">total_received_messages</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf">;</span>
<span class="source-lf">        if (in</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> lf_tag()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">microstep) {</span>
<span class="source-lf">            lf_print_warning(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Received incorrect value %d. Expected %d.</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">, in</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value, lf_tag()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">microstep);</span>
<span class="source-lf comment-line-double-dash-lflang">            </span><span class="source-lf comment-line-double-dash-lflang">// exit(1); // The receiver should tolerate this type of error</span>
<span class="source-lf comment-line-double-dash-lflang">                        </span><span class="source-lf comment-line-double-dash-lflang">// in this test because messages on the network can</span>
<span class="source-lf comment-line-double-dash-lflang">                        </span><span class="source-lf comment-line-double-dash-lflang">// arrive late. Note that with an accurate STP offset,</span>
<span class="source-lf comment-line-double-dash-lflang">                        </span><span class="source-lf comment-line-double-dash-lflang">// this type of error should be extremely rare.</span>
<span class="source-lf"></span>
<span class="source-lf">        }</span>
<span class="source-lf">        if (in</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">received_messages) {</span>
<span class="source-lf">            lf_print_warning(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Skipped expected value %d. Received value %d.</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">, self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">received_messages, in</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value);</span>
<span class="source-lf">            self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">received_messages </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> in</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value;</span>
<span class="source-lf comment-line-double-dash-lflang">            </span><span class="source-lf comment-line-double-dash-lflang">// exit(1); // The receiver should tolerate this type of error</span>
<span class="source-lf comment-line-double-dash-lflang">                        </span><span class="source-lf comment-line-double-dash-lflang">// in this test because multiple messages arriving</span>
<span class="source-lf comment-line-double-dash-lflang">                        </span><span class="source-lf comment-line-double-dash-lflang">// at a given tag (t, m) can overwrite each other.</span>
<span class="source-lf comment-line-double-dash-lflang">                        </span><span class="source-lf comment-line-double-dash-lflang">// Because messages arrive in order, only the last</span>
<span class="source-lf comment-line-double-dash-lflang">                        </span><span class="source-lf comment-line-double-dash-lflang">// value that is received on the port at a given tag</span>
<span class="source-lf comment-line-double-dash-lflang">                        </span><span class="source-lf comment-line-double-dash-lflang">// can be observed. Note that with an accurate STP</span>
<span class="source-lf comment-line-double-dash-lflang">                        </span><span class="source-lf comment-line-double-dash-lflang">// offset, this type of error should be extremely</span>
<span class="source-lf comment-line-double-dash-lflang">                        </span><span class="source-lf comment-line-double-dash-lflang">// rare.</span>
<span class="source-lf comment-line-double-dash-lflang">                        </span><span class="source-lf comment-line-double-dash-lflang">// FIXME: Messages should not be dropped or</span>
<span class="source-lf comment-line-double-dash-lflang">                        </span><span class="source-lf comment-line-double-dash-lflang">// overwritten.</span>
<span class="source-lf">        }</span>
<span class="source-lf">        self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">received_messages</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf">;</span>
<span class="source-lf">        if (self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">received_messages </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">take_a_break_after) {</span>
<span class="source-lf comment-line-double-dash-lflang">            </span><span class="source-lf comment-line-double-dash-lflang">// Sender is taking a break;</span>
<span class="source-lf">            self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">breaks</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf">;</span>
<span class="source-lf">            self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">received_messages </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">;</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">shutdown</span><span class="source-lf">) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        if (self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">breaks !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">3</span><span class="source-lf"> ||</span>
<span class="source-lf">            (self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">total_received_messages !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> ((SEC(</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">)</span><span class="source-lf keyword-operator-lflang">/</span><span class="source-lf">self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">break_interval)</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">) </span><span class="source-lf keyword-operator-lflang">*</span><span class="source-lf"> self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">take_a_break_after)</span>
<span class="source-lf">        ) {</span>
<span class="source-lf">            lf_print_error_and_exit(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Test failed. Breaks: %d, Messages: %d.</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">, self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">breaks, self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">total_received_messages);</span>
<span class="source-lf">        }</span>
<span class="source-lf">        lf_print(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">SUCCESS: Successfully received all messages from the sender. Breaks: %d, Messages: %d.</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">, self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">breaks, self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">total_received_messages);</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">STPReceiver</span><span class="source-lf">(</span>
<span class="source-lf">    take_a_break_after:</span><span class="source-lf storage-type-lflang"> int</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">10</span><span class="source-lf">),</span>
<span class="source-lf">    break_interval:</span><span class="source-lf storage-type-lflang"> time</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">400</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">),</span>
<span class="source-lf">    stp_offset:</span><span class="source-lf storage-type-lflang"> time</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">)</span>
<span class="source-lf">) {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf meta-embedded-block-cpp"> in:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> int</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf meta-embedded-block-cpp"> last_time_updated_stp:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> time</span><span class="source-lf meta-embedded-block-cpp">(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">receiver</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Receiver</span><span class="source-lf">(take_a_break_after </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">10</span><span class="source-lf">, break_interval </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">400</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">timer</span><span class="source-lf"> t(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">, </span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">)  </span><span class="source-lf comment-line-double-dash-lflang">// Force advancement of logical time</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(in) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">receiver</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">in</span><span class="source-lf"> {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        lf_print(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Received %d.</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">, in</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value);</span>
<span class="source-lf">        lf_set(</span><span class="source-lf variable-other-constant-reactorinstance-lflang">receiver</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">in</span><span class="source-lf">, in</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value);</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">} </span><span class="source-lf keyword-control-lflang">STP</span><span class="source-lf">(stp_offset) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        lf_print(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Received %d late.</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">, in</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value);</span>
<span class="source-lf">        tag_t current_tag </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> lf_tag();</span>
<span class="source-lf">        lf_print(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">STP violation of (%lld, %u) perceived on the input.</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">,</span>
<span class="source-lf">               </span><span class="source-lf variable-other-constant-reactorinstance-lflang">current_tag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf storage-type-lflang">time</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-</span><span class="source-lf"> in</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf variable-other-constant-reactorinstance-lflang">intended_tag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf storage-type-lflang">time</span><span class="source-lf">,</span>
<span class="source-lf">               </span><span class="source-lf variable-other-constant-reactorinstance-lflang">current_tag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">microstep</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-</span><span class="source-lf"> in</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf variable-other-constant-reactorinstance-lflang">intended_tag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">microstep</span><span class="source-lf">);</span>
<span class="source-lf">        lf_set(</span><span class="source-lf variable-other-constant-reactorinstance-lflang">receiver</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">in</span><span class="source-lf">, in</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value);</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// Only update the STP offset once per</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// time step.</span>
<span class="source-lf">        if (</span><span class="source-lf variable-other-constant-reactorinstance-lflang">current_tag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf storage-type-lflang">time</span><span class="source-lf"> !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">last_time_updated_stp) {</span>
<span class="source-lf">            lf_print(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Raising the STP offset by %lld.</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">, MSEC(</span><span class="source-lf constant-numeric-int-lflang">10</span><span class="source-lf">));</span>
<span class="source-lf">            self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">stp_offset </span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> MSEC(</span><span class="source-lf constant-numeric-int-lflang">10</span><span class="source-lf">);</span>
<span class="source-lf">            lf_set_stp_offset(MSEC(</span><span class="source-lf constant-numeric-int-lflang">10</span><span class="source-lf">));</span>
<span class="source-lf">            self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">last_time_updated_stp </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">current_tag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf storage-type-lflang">time</span><span class="source-lf">;</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(t) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// Do nothing</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">federated</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">DistributedLoopedActionDecentralized</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">sender</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Sender</span><span class="source-lf">(take_a_break_after </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">10</span><span class="source-lf">, break_interval </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">400</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">stpReceiver</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">STPReceiver</span><span class="source-lf">(</span>
<span class="source-lf">        take_a_break_after </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">10</span><span class="source-lf">,</span>
<span class="source-lf">        break_interval </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">400</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span>
<span class="source-lf">    )</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">sender</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">out</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">stpReceiver</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">in</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
