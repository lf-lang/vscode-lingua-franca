<span class="source-lf comment-block-lflang">/**</span><span class="source-lf comment-block-lflang"> Utility reactor to record and test execution traces. </span><span class="source-lf comment-block-lflang">*/</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">C</span>
<span class="source-lf"></span>
<span class="source-lf keyword-control-lflang">preamble</span><span class="source-lf"> {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf comment-line-double-dash-lflang">    </span><span class="source-lf comment-line-double-dash-lflang">#include <stdio.h></span>
<span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">TraceTesting</span><span class="source-lf">(</span>
<span class="source-lf">    events_size:</span><span class="source-lf storage-type-lflang"> int</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">),</span>
<span class="source-lf">    trace_size:</span><span class="source-lf storage-type-lflang"> int</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">),</span>
<span class="source-lf">    trace:</span><span class="source-lf storage-type-lflang"> int</span><span class="source-lf">[](</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">),</span>
<span class="source-lf">    training:</span><span class="source-lf storage-type-lflang"> bool</span><span class="source-lf">(</span><span class="source-lf constant-language-lflang">false</span><span class="source-lf">)</span>
<span class="source-lf">) {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf">[events_size] events:</span><span class="source-lf storage-type-lflang"> int</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf meta-embedded-block-cpp"> last_reaction_time:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> int</span><span class="source-lf meta-embedded-block-cpp">(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf meta-embedded-block-cpp"> trace_idx:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> int</span><span class="source-lf meta-embedded-block-cpp">(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf meta-embedded-block-cpp"> recorded_events:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> int</span><span class="source-lf meta-embedded-block-cpp">*</span><span class="source-lf meta-embedded-block-cpp">(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf meta-embedded-block-cpp"> recorded_events_next:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> int</span><span class="source-lf meta-embedded-block-cpp">(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">startup</span><span class="source-lf">) {</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">last_reaction_time </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> lf_time_logical(); </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(events) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// Time passed since last reaction</span>
<span class="source-lf">        int curr_reaction_delay </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> lf_time_logical() </span><span class="source-lf keyword-operator-lflang">-</span><span class="source-lf"> self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">last_reaction_time;</span>
<span class="source-lf"></span>
<span class="source-lf">        if (self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">training) {</span>
<span class="source-lf comment-line-double-dash-lflang">            </span><span class="source-lf comment-line-double-dash-lflang">// Save time</span>
<span class="source-lf">            self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">recorded_events </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> (int</span><span class="source-lf keyword-operator-lflang">*</span><span class="source-lf">) realloc(self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">recorded_events, sizeof(int) </span><span class="source-lf keyword-operator-lflang">*</span><span class="source-lf"> (self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">recorded_events_next </span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">*</span><span class="source-lf"> self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">events_size));</span>
<span class="source-lf">            self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">recorded_events[self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">recorded_events_next</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf">] </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> curr_reaction_delay;</span>
<span class="source-lf">        } else {</span>
<span class="source-lf">            if (self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">trace_idx ></span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">trace_size) {</span>
<span class="source-lf">                printf(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">ERROR: Trace Error: Current execution exceeds given trace.</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">);</span>
<span class="source-lf">                exit(</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">);</span>
<span class="source-lf">            }</span>
<span class="source-lf"></span>
<span class="source-lf">            int trace_reaction_delay </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">trace[self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">trace_idx</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf">];</span>
<span class="source-lf"></span>
<span class="source-lf">            if (curr_reaction_delay !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> trace_reaction_delay) {</span>
<span class="source-lf">                printf(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">ERROR: Trace Mismatch: Unexpected reaction timing. (delay: %d, expected: %d)</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">, curr_reaction_delay, trace_reaction_delay);</span>
<span class="source-lf">                exit(</span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf">);</span>
<span class="source-lf">            }</span>
<span class="source-lf">        }</span>
<span class="source-lf"></span>
<span class="source-lf">        for (int i </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">; i < self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">events_size; i</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf">) {</span>
<span class="source-lf">            int curr_present </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> events[i]</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">is_present;</span>
<span class="source-lf">            int curr_value </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> events[i]</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value;</span>
<span class="source-lf"></span>
<span class="source-lf">            if (self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">training) {</span>
<span class="source-lf comment-line-double-dash-lflang">                </span><span class="source-lf comment-line-double-dash-lflang">// Save event</span>
<span class="source-lf">                self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">recorded_events[self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">recorded_events_next</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf">] </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> curr_present;</span>
<span class="source-lf">                self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">recorded_events[self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">recorded_events_next</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf">] </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> curr_value;</span>
<span class="source-lf">            } else {</span>
<span class="source-lf">                int trace_present </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">trace[self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">trace_idx</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf">];</span>
<span class="source-lf">                int trace_value </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">trace[self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">trace_idx</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf">];</span>
<span class="source-lf"></span>
<span class="source-lf">                if (trace_present !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> curr_present) {</span>
<span class="source-lf">                    printf(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">ERROR: Trace Mismatch: Unexpected event presence. (event: %d, presence: %d, expected: %d)</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">, i, curr_present, trace_present);</span>
<span class="source-lf">                    exit(</span><span class="source-lf constant-numeric-int-lflang">3</span><span class="source-lf">);</span>
<span class="source-lf">                } else if (curr_present && trace_value !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> curr_value) {</span>
<span class="source-lf">                    printf(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">ERROR: Trace Mismatch: Unexpected event value. (event: %d, presence: %d, expected: %d)</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">, i, curr_value, trace_value);</span>
<span class="source-lf">                    exit(</span><span class="source-lf constant-numeric-int-lflang">4</span><span class="source-lf">);</span>
<span class="source-lf">                }</span>
<span class="source-lf">            }</span>
<span class="source-lf">        }</span>
<span class="source-lf"></span>
<span class="source-lf">        self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">last_reaction_time </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> lf_time_logical();</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">shutdown</span><span class="source-lf">) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        if (self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">training) {</span>
<span class="source-lf">            printf(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Recorded event trace (%d): (</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">, self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">recorded_events_next);</span>
<span class="source-lf">            for (int i </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">; i < self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">recorded_events_next; i</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf">) {</span>
<span class="source-lf">                printf(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">%d</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">, self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">recorded_events[i]);</span>
<span class="source-lf">                if (i < self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">recorded_events_next </span><span class="source-lf keyword-operator-lflang">-</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">) {</span>
<span class="source-lf">                    printf(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">,</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">);</span>
<span class="source-lf">                }</span>
<span class="source-lf">            }</span>
<span class="source-lf">            printf(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">)</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">);</span>
<span class="source-lf"></span>
<span class="source-lf">            free(self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">recorded_events);</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
