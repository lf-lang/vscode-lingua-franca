<span class="source-lf comment-block-lflang">/**</span>
<span class="source-lf comment-block-lflang"> * Basic benchmark from the Savina benchmark suite that is intended to measure</span>
<span class="source-lf comment-block-lflang"> * message-passing overhead. This is based on</span>
<span class="source-lf comment-block-lflang"> * https://www.scala-lang.org/old/node/54 See</span>
<span class="source-lf comment-block-lflang"> * https://shamsimam.github.io/papers/2014-agere-savina.pdf.</span>
<span class="source-lf comment-block-lflang"> *</span>
<span class="source-lf comment-block-lflang"> * Ping introduces a microstep delay using a logical action to break the</span>
<span class="source-lf comment-block-lflang"> * causality loop.</span>
<span class="source-lf comment-block-lflang"> *</span>
<span class="source-lf comment-block-lflang"> * To get a sense, some (informal) results for 1,000,000 ping-pongs on my Mac:</span>
<span class="source-lf comment-block-lflang"> *</span>
<span class="source-lf comment-block-lflang"> * Unthreaded: 97 msec Threaded: 265 msec (168 msec with optimization of</span>
<span class="source-lf comment-block-lflang"> * executing immediately)</span>
<span class="source-lf comment-block-lflang"> *</span>
<span class="source-lf comment-block-lflang"> * There is no parallelism in this application, so it does not benefit from</span>
<span class="source-lf comment-block-lflang"> * being being threaded, just some additional overhead.</span>
<span class="source-lf comment-block-lflang"> *</span>
<span class="source-lf comment-block-lflang"> * These measurements are total execution time, including startup and shutdown.</span>
<span class="source-lf comment-block-lflang"> * These are about an order of magnitude faster than anything reported in the</span>
<span class="source-lf comment-block-lflang"> * paper.</span>
<span class="source-lf comment-block-lflang"> *</span>
<span class="source-lf comment-block-lflang"> * @author Edward A. Lee</span>
<span class="source-lf comment-block-lflang"> </span><span class="source-lf comment-block-lflang">*/</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">C</span><span class="source-lf meta-targetspec-lflang"> {</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">    fast</span><span class="source-lf meta-targetspec-lflang">: </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">true</span>
<span class="source-lf meta-targetspec-lflang">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Ping</span><span class="source-lf">(count:</span><span class="source-lf storage-type-lflang"> int</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">10</span><span class="source-lf">)) {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf meta-embedded-block-cpp"> receive:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> int</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">output</span><span class="source-lf meta-embedded-block-cpp"> send:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> int</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf meta-embedded-block-cpp"> pingsLeft:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> int</span><span class="source-lf meta-embedded-block-cpp">(</span><span class="source-lf">count)</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">logical</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">action</span><span class="source-lf"> serve</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">startup</span><span class="source-lf">, serve) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> send {</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> lf_set(send, self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">pingsLeft</span><span class="source-lf keyword-operator-lflang">-</span><span class="source-lf keyword-operator-lflang">-</span><span class="source-lf">); </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(receive) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> serve {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        if (self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">pingsLeft > </span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">) {</span>
<span class="source-lf">            lf_schedule(serve, </span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">);</span>
<span class="source-lf">        } else {</span>
<span class="source-lf">            lf_request_stop();</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Pong</span><span class="source-lf">(expected:</span><span class="source-lf storage-type-lflang"> int</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">10</span><span class="source-lf">)) {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf meta-embedded-block-cpp"> receive:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> int</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">output</span><span class="source-lf meta-embedded-block-cpp"> send:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> int</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf meta-embedded-block-cpp"> count:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> int</span><span class="source-lf meta-embedded-block-cpp">(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(receive) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> send {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">count</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf">;</span>
<span class="source-lf">        lf_set(send, receive</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value);</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">shutdown</span><span class="source-lf">) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        if (self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">count !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">expected) {</span>
<span class="source-lf">            fprintf(stderr, </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Pong expected to receive %d inputs, but it received %d.</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">,</span>
<span class="source-lf">                self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">expected, self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">count</span>
<span class="source-lf">            );</span>
<span class="source-lf">            exit(</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">);</span>
<span class="source-lf">        }</span>
<span class="source-lf">        printf(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Success.</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">);</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">main</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">PingPongThreaded</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">ping</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Ping</span><span class="source-lf">()</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">pong</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Pong</span><span class="source-lf">()</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">ping</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">send</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">pong</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">receive</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">pong</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">send</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">ping</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">receive</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
