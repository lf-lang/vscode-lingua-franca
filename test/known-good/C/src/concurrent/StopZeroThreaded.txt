<span class="source-lf comment-block-lflang">/**</span>
<span class="source-lf comment-block-lflang"> * Test for lf_request_stop() at tag (0,0). This version uses the threaded</span>
<span class="source-lf comment-block-lflang"> * runtime.</span>
<span class="source-lf comment-block-lflang"> *</span>
<span class="source-lf comment-block-lflang"> * @author Soroush Bateni</span>
<span class="source-lf comment-block-lflang"> </span><span class="source-lf comment-block-lflang">*/</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">C</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Sender</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">output</span><span class="source-lf meta-embedded-block-cpp"> out:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> int</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf meta-embedded-block-cpp"> reaction_invoked_correctly:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> bool</span><span class="source-lf meta-embedded-block-cpp">(</span><span class="source-lf constant-language-lflang">false</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">timer</span><span class="source-lf"> t(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">, </span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">usec</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">logical</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">action</span><span class="source-lf"> act</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(t) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> out, act {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        printf(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Sending 42 at (%lld, %u).</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">,</span>
<span class="source-lf">                     lf_time_logical_elapsed(),</span>
<span class="source-lf">                     lf_tag()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">microstep);</span>
<span class="source-lf">        lf_set(out, </span><span class="source-lf constant-numeric-int-lflang">42</span><span class="source-lf">);</span>
<span class="source-lf">        lf_schedule(act, </span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">);</span>
<span class="source-lf">        tag_t zero </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> (tag_t) { </span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf storage-type-lflang">time</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> lf_time_start(), </span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">microstep </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> 0u };</span>
<span class="source-lf">        tag_t one </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> (tag_t) { </span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf storage-type-lflang">time</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> lf_time_start(), </span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">microstep </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> 1u };</span>
<span class="source-lf">        if (lf_tag_compare(lf_tag(), zero) </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">) {</span>
<span class="source-lf comment-line-double-dash-lflang">            </span><span class="source-lf comment-line-double-dash-lflang">// Request stop at (0,0)</span>
<span class="source-lf">            printf(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Requesting stop at (%lld, %u).</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">,</span>
<span class="source-lf">                     lf_time_logical_elapsed(),</span>
<span class="source-lf">                     lf_tag()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">microstep);</span>
<span class="source-lf">            lf_request_stop();</span>
<span class="source-lf">        } else if (lf_tag_compare(lf_tag(), one) > </span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">) {</span>
<span class="source-lf">            fprintf(stderr, </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">ERROR: Reaction called after shutdown at (%lld, %u).</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">,</span>
<span class="source-lf">                     lf_time_logical_elapsed(),</span>
<span class="source-lf">                     lf_tag()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">microstep);</span>
<span class="source-lf">            exit(</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">);</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(act) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// Reaction should be invoked at (0,1)</span>
<span class="source-lf">        tag_t one </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> (tag_t) { </span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf storage-type-lflang">time</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> lf_time_start(), </span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">microstep </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> 1u };</span>
<span class="source-lf">        if (lf_tag_compare(lf_tag(), one) </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">) {</span>
<span class="source-lf">            self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">reaction_invoked_correctly </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-language-lflang">true</span><span class="source-lf">;</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">shutdown</span><span class="source-lf">) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        if (lf_time_logical_elapsed() !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> USEC(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">) ||</span>
<span class="source-lf">            lf_tag()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">microstep !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">) {</span>
<span class="source-lf">            fprintf(stderr, </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">ERROR: Sender failed to stop the program in time. </span><span class="source-lf string-quoted-double-lflang">"</span>
<span class="source-lf">                    </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Stopping at (%lld, %u).</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">,</span>
<span class="source-lf">                     lf_time_logical_elapsed(),</span>
<span class="source-lf">                     lf_tag()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">microstep);</span>
<span class="source-lf">            exit(</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">);</span>
<span class="source-lf">        } else if (self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">reaction_invoked_correctly </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-language-lflang">false</span><span class="source-lf">) {</span>
<span class="source-lf">            fprintf(stderr, </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">ERROR: Sender reaction(act) was not invoked. </span><span class="source-lf string-quoted-double-lflang">"</span>
<span class="source-lf">                    </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Stopping at (%lld, %u).</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">,</span>
<span class="source-lf">                     lf_time_logical_elapsed(),</span>
<span class="source-lf">                     lf_tag()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">microstep);</span>
<span class="source-lf">            exit(</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">);</span>
<span class="source-lf">        }</span>
<span class="source-lf">        printf(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">SUCCESS: Successfully stopped the program at (%lld, %u).</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">,</span>
<span class="source-lf">                     lf_time_logical_elapsed(),</span>
<span class="source-lf">                     lf_tag()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">microstep);</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Receiver</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf meta-embedded-block-cpp"> in:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> int</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(in) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        printf(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Received %d at (%lld, %u).</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">,</span>
<span class="source-lf">                     in</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value,</span>
<span class="source-lf">                     lf_time_logical_elapsed(),</span>
<span class="source-lf">                     lf_tag()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">microstep);</span>
<span class="source-lf">        tag_t zero </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> (tag_t) { </span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf storage-type-lflang">time</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> lf_time_start(), </span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">microstep </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> 0u };</span>
<span class="source-lf">        if (lf_tag_compare(lf_tag(), zero) </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">) {</span>
<span class="source-lf comment-line-double-dash-lflang">            </span><span class="source-lf comment-line-double-dash-lflang">// Request stop at (0,0)</span>
<span class="source-lf">            printf(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Requesting stop at (%lld, %u).</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">,</span>
<span class="source-lf">                     lf_time_logical_elapsed(),</span>
<span class="source-lf">                     lf_tag()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">microstep);</span>
<span class="source-lf">            lf_request_stop();</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">shutdown</span><span class="source-lf">) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// Shutdown events must occur at (0, 1) on the</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// receiver.</span>
<span class="source-lf">        if (lf_time_logical_elapsed() !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> USEC(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">) ||</span>
<span class="source-lf">            lf_tag()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">microstep !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">) {</span>
<span class="source-lf">            fprintf(stderr, </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">ERROR: Receiver failed to stop the program in time. </span><span class="source-lf string-quoted-double-lflang">"</span>
<span class="source-lf">                    </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Stopping at (%lld, %u).</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">,</span>
<span class="source-lf">                     lf_time_logical_elapsed(),</span>
<span class="source-lf">                     lf_tag()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">microstep);</span>
<span class="source-lf">            exit(</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">);</span>
<span class="source-lf">        }</span>
<span class="source-lf">        printf(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">SUCCESS: Successfully stopped the program at (%lld, %u).</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">,</span>
<span class="source-lf">                     lf_time_logical_elapsed(),</span>
<span class="source-lf">                     lf_tag()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">microstep);</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">main</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">StopZeroThreaded</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">sender</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf">[</span><span class="source-lf constant-numeric-int-lflang">4</span><span class="source-lf">] Sender()</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">receiver</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf">[</span><span class="source-lf constant-numeric-int-lflang">4</span><span class="source-lf">] Receiver()</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">sender</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">out</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">receiver</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">in</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
