<span class="source-lf comment-block-lflang">/**</span>
<span class="source-lf comment-block-lflang"> * A sender reactor that outputs integers in superdense time.</span>
<span class="source-lf comment-block-lflang"> *</span>
<span class="source-lf comment-block-lflang"> * @author Soroush Bateni</span>
<span class="source-lf comment-block-lflang"> </span><span class="source-lf comment-block-lflang">*/</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">C</span>
<span class="source-lf"></span>
<span class="source-lf comment-block-lflang">/**</span>
<span class="source-lf comment-block-lflang"> * @param take_a_break_after: Indicates how many messages are sent in</span>
<span class="source-lf comment-block-lflang"> * consecutive superdense time</span>
<span class="source-lf comment-block-lflang"> * @param break_interval: Determines how long the reactor should take a break</span>
<span class="source-lf comment-block-lflang"> * after sending take_a_break_after messages.</span>
<span class="source-lf comment-block-lflang"> </span><span class="source-lf comment-block-lflang">*/</span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Sender</span><span class="source-lf">(take_a_break_after:</span><span class="source-lf storage-type-lflang"> int</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">10</span><span class="source-lf">), break_interval:</span><span class="source-lf storage-type-lflang"> time</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">400</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">)) {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">output</span><span class="source-lf meta-embedded-block-cpp"> out:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> int</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">logical</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">action</span><span class="source-lf"> act</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf meta-embedded-block-cpp"> sent_messages:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> int</span><span class="source-lf meta-embedded-block-cpp">(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">startup</span><span class="source-lf">, act) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> act, out {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// Send a message on out</span>
<span class="source-lf">        </span><span class="source-lf comment-block-lflang">/*</span><span class="source-lf comment-block-lflang"> printf("At tag (%lld, %u) sending value %d.\n",</span>
<span class="source-lf comment-block-lflang">            lf_time_logical_elapsed(),</span>
<span class="source-lf comment-block-lflang">            lf_tag().microstep,</span>
<span class="source-lf comment-block-lflang">            self->sent_messages</span>
<span class="source-lf comment-block-lflang">        ); </span><span class="source-lf comment-block-lflang">*/</span>
<span class="source-lf">        lf_set(out, self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">sent_messages);</span>
<span class="source-lf">        self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">sent_messages</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf">;</span>
<span class="source-lf">        if (self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">sent_messages < self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">take_a_break_after) {</span>
<span class="source-lf">            lf_schedule(act, </span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">);</span>
<span class="source-lf">        } else {</span>
<span class="source-lf comment-line-double-dash-lflang">            </span><span class="source-lf comment-line-double-dash-lflang">// Take a break</span>
<span class="source-lf">            self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">sent_messages</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">;</span>
<span class="source-lf">            lf_schedule(act, self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">break_interval);</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
