<span class="source-lf comment-line-double-dash-lflang">// Source produces a dynamically allocated arrays on a multiport, which it</span>
<span class="source-lf comment-line-double-dash-lflang">// passes to Scale. Scale requests a writable copy, which, instead of copying,</span>
<span class="source-lf comment-line-double-dash-lflang">// it just gets ownership of the original array. It modifies it and passes it to</span>
<span class="source-lf comment-line-double-dash-lflang">// Print. It gets freed after Print is done with it.</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">C</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Source</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">output</span><span class="source-lf">[</span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf">] out:</span><span class="source-lf storage-type-lflang"> int</span><span class="source-lf">[]</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">startup</span><span class="source-lf">) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> out {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// Dynamically allocate an output array of length 3.</span>
<span class="source-lf">        SET_NEW_ARRAY(out[</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">], </span><span class="source-lf constant-numeric-int-lflang">3</span><span class="source-lf">);</span>
<span class="source-lf"></span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// Above allocates the array, which then must be populated.</span>
<span class="source-lf">        out[</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">]</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value[</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">] </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">;</span>
<span class="source-lf">        out[</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">]</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value[</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">] </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">;</span>
<span class="source-lf">        out[</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">]</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value[</span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf">] </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf">;</span>
<span class="source-lf"></span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// Dynamically allocate an output array of length 3.</span>
<span class="source-lf">        SET_NEW_ARRAY(out[</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">], </span><span class="source-lf constant-numeric-int-lflang">3</span><span class="source-lf">);</span>
<span class="source-lf"></span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// Above allocates the array, which then must be populated.</span>
<span class="source-lf">        out[</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">]</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value[</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">] </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">3</span><span class="source-lf">;</span>
<span class="source-lf">        out[</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">]</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value[</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">] </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">4</span><span class="source-lf">;</span>
<span class="source-lf">        out[</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">]</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value[</span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf">] </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">5</span><span class="source-lf">;</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Print</span><span class="source-lf">(scale:</span><span class="source-lf storage-type-lflang"> int</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">)) {  </span><span class="source-lf comment-line-double-dash-lflang">// The scale parameter is just for testing.</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf">[</span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf">] in:</span><span class="source-lf storage-type-lflang"> int</span><span class="source-lf">[]</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(in) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        int count </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">;       </span><span class="source-lf comment-line-double-dash-lflang">// For testing.</span>
<span class="source-lf">        bool failed </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-language-lflang">false</span><span class="source-lf">; </span><span class="source-lf comment-line-double-dash-lflang">// For testing.</span>
<span class="source-lf">        for(int j </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">; j < </span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf">; j</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf">) {</span>
<span class="source-lf">            printf(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Received on channel %d: [</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">, j);</span>
<span class="source-lf">            for (int i </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">; i < in[j]</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">length; i</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf">) {</span>
<span class="source-lf">                if (i > </span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">) printf(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">, </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">);</span>
<span class="source-lf">                printf(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">%d</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">, in[j]</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value[i]);</span>
<span class="source-lf comment-line-double-dash-lflang">                </span><span class="source-lf comment-line-double-dash-lflang">// For testing, check whether values match expectation.</span>
<span class="source-lf">                if (in[j]</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value[i] !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">scale </span><span class="source-lf keyword-operator-lflang">*</span><span class="source-lf"> count) {</span>
<span class="source-lf">                    failed </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-language-lflang">true</span><span class="source-lf">;</span>
<span class="source-lf">                }</span>
<span class="source-lf">                count</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf">;         </span><span class="source-lf comment-line-double-dash-lflang">// For testing.</span>
<span class="source-lf">            }</span>
<span class="source-lf">            printf(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">]</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">);</span>
<span class="source-lf">        }</span>
<span class="source-lf">        if (failed) {</span>
<span class="source-lf">            printf(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">ERROR: Value received by Print does not match expectation!</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\n</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">);</span>
<span class="source-lf">            exit(</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">);</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Scale</span><span class="source-lf">(scale:</span><span class="source-lf storage-type-lflang"> int</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf">)) {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">mutable</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf">[</span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf">] in:</span><span class="source-lf storage-type-lflang"> int</span><span class="source-lf">[]</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">output</span><span class="source-lf">[</span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf">] out:</span><span class="source-lf storage-type-lflang"> int</span><span class="source-lf">[]</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(in) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> out {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        for(int j </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">; j < in_width; j</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf">) {</span>
<span class="source-lf">            for(int i </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">; i < in[j]</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">length; i</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf">) {</span>
<span class="source-lf">                if (in[j]</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">is_present) {</span>
<span class="source-lf">                    in[j]</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value[i] </span><span class="source-lf keyword-operator-lflang">*</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">scale;</span>
<span class="source-lf">                }</span>
<span class="source-lf">            }</span>
<span class="source-lf">            lf_set_token(out[j], in[j]</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">token);</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">main</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">s</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Source</span><span class="source-lf">()</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">c</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Scale</span><span class="source-lf">()</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">p</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Print</span><span class="source-lf">(scale </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">s</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">out</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">c</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">in</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">c</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">out</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">p</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">in</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
