<span class="source-lf comment-line-double-dash-lflang">// Test ability of methods to call each other and (recursively) themselves.</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">C</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">main</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf meta-embedded-block-cpp"> foo:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> int</span><span class="source-lf meta-embedded-block-cpp">(</span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf">)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">method</span><span class="source-lf entity-name-function-member-lflang"> fib</span><span class="source-lf">(n:</span><span class="source-lf storage-type-lflang"> int</span><span class="source-lf">):</span><span class="source-lf storage-type-lflang"> int</span><span class="source-lf"> {</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">  </span><span class="source-lf comment-line-double-dash-lflang">// Return the n-th Fibonacci number.</span>
<span class="source-lf">        if (n <</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">) return </span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">;</span>
<span class="source-lf">        return add(fib(n</span><span class="source-lf keyword-operator-lflang">-</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">), fib(n</span><span class="source-lf keyword-operator-lflang">-</span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf">));</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">method</span><span class="source-lf entity-name-function-member-lflang"> add</span><span class="source-lf">(x:</span><span class="source-lf storage-type-lflang"> int</span><span class="source-lf">, y:</span><span class="source-lf storage-type-lflang"> int</span><span class="source-lf">):</span><span class="source-lf storage-type-lflang"> int</span><span class="source-lf"> {</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> return x </span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf"> y; </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">startup</span><span class="source-lf">) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        for (int n </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">; n < </span><span class="source-lf constant-numeric-int-lflang">10</span><span class="source-lf">; n</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf">) {</span>
<span class="source-lf">            lf_print(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">%d-th Fibonacci number is %d</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">, n, fib(n));</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
