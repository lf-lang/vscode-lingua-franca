<span class="source-lf comment-line-double-dash-lflang">// This test checks that the downstream reaction is not invoked more than once</span>
<span class="source-lf comment-line-double-dash-lflang">// at a logical time.</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">C</span><span class="source-lf meta-targetspec-lflang"> {</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">    logging</span><span class="source-lf meta-targetspec-lflang">: LOG,</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">    timeout</span><span class="source-lf meta-targetspec-lflang">: </span><span class="source-lf meta-targetspec-lflang constant-numeric-int-lflang">1</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-numeric-lflang">sec</span>
<span class="source-lf meta-targetspec-lflang">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Source</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">output</span><span class="source-lf meta-embedded-block-cpp"> out:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> int</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf meta-embedded-block-cpp"> count:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> int</span><span class="source-lf meta-embedded-block-cpp">(</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">timer</span><span class="source-lf"> t(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">, </span><span class="source-lf constant-numeric-int-lflang">100</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(t) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> out {</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> lf_set(out, self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">count</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf">); </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Sieve</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf meta-embedded-block-cpp"> in:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> int</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">output</span><span class="source-lf meta-embedded-block-cpp"> out:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> bool</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf meta-embedded-block-cpp"> primes:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> int</span><span class="source-lf meta-embedded-block-cpp">*</span><span class="source-lf meta-embedded-block-cpp">(</span><span class="source-lf">{</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> NULL </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">})</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf meta-embedded-block-cpp"> last_prime:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> int</span><span class="source-lf meta-embedded-block-cpp">(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">startup</span><span class="source-lf">) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// There are 1229 primes between 1 and 10,000.</span>
<span class="source-lf">        self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">primes </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> (int</span><span class="source-lf keyword-operator-lflang">*</span><span class="source-lf">)calloc(</span><span class="source-lf constant-numeric-int-lflang">1229</span><span class="source-lf">, sizeof(int));</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// Primes 1 and 2 are not on the list.</span>
<span class="source-lf">        self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">primes[</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">] </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">3</span><span class="source-lf">;</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(in) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> out {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// Reject inputs that are out of bounds.</span>
<span class="source-lf">        if (in</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value <</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf"> || in</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value > </span><span class="source-lf constant-numeric-int-lflang">10000</span><span class="source-lf">) {</span>
<span class="source-lf">            lf_print_warning(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Sieve: Input value out of range: %d.</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">, in</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value);</span>
<span class="source-lf">        }</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// Primes 1 and 2 are not on the list.</span>
<span class="source-lf">        if (in</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf"> || in</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf">) {</span>
<span class="source-lf">            lf_set(out, </span><span class="source-lf constant-language-lflang">true</span><span class="source-lf">);</span>
<span class="source-lf">            return;</span>
<span class="source-lf">        }</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// If the input is greater than the last found prime, then</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// we have to expand the list of primes before checking to</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// see whether this is prime.</span>
<span class="source-lf">        int candidate </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">primes[self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">last_prime];</span>
<span class="source-lf">        while (in</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value > self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">primes[self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">last_prime]) {</span>
<span class="source-lf comment-line-double-dash-lflang">            </span><span class="source-lf comment-line-double-dash-lflang">// The next prime is always odd, so we can increment by two.</span>
<span class="source-lf">            candidate </span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf">;</span>
<span class="source-lf">            bool prime </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-language-lflang">true</span><span class="source-lf">;</span>
<span class="source-lf">            for (int i </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">; i < self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">last_prime; i</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf">) {</span>
<span class="source-lf">                if (candidate </span><span class="source-lf keyword-operator-lflang">%</span><span class="source-lf"> self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">primes[i] </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">) {</span>
<span class="source-lf comment-line-double-dash-lflang">                    </span><span class="source-lf comment-line-double-dash-lflang">// Candidate is not prime. Break and add 2</span>
<span class="source-lf">                    prime </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-language-lflang">false</span><span class="source-lf">;</span>
<span class="source-lf">                    break;</span>
<span class="source-lf">                }</span>
<span class="source-lf">            }</span>
<span class="source-lf comment-line-double-dash-lflang">            </span><span class="source-lf comment-line-double-dash-lflang">// If the candidate is not divisible by any prime in the list, it is prime.</span>
<span class="source-lf">            if (prime) {</span>
<span class="source-lf">                self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">last_prime</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf">;</span>
<span class="source-lf">                self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">primes[self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">last_prime] </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> candidate;</span>
<span class="source-lf">                lf_print(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Sieve: Found prime: %d.</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">, candidate);</span>
<span class="source-lf">            }</span>
<span class="source-lf">        }</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// We are now assured that the input is less than or</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// equal to the last prime on the list.</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// See whether the input is an already found prime.</span>
<span class="source-lf">        for (int i </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">last_prime; i ></span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">; i</span><span class="source-lf keyword-operator-lflang">-</span><span class="source-lf keyword-operator-lflang">-</span><span class="source-lf">) {</span>
<span class="source-lf comment-line-double-dash-lflang">            </span><span class="source-lf comment-line-double-dash-lflang">// Search the primes from the end, where they are sparser.</span>
<span class="source-lf">            if (self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">primes[i] </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> in</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value) {</span>
<span class="source-lf">                lf_set(out, </span><span class="source-lf constant-language-lflang">true</span><span class="source-lf">);</span>
<span class="source-lf">                return;</span>
<span class="source-lf">            }</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Destination</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf meta-embedded-block-cpp"> ok:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> bool</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf meta-embedded-block-cpp"> in:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> int</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf meta-embedded-block-cpp"> last_invoked:</span><span class="source-lf meta-embedded-block-cpp storage-type-lflang"> tag_t</span><span class="source-lf meta-embedded-block-cpp">(</span><span class="source-lf">{</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> NEVER_TAG_INITIALIZER </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">})</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(ok, in) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        if (ok</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">is_present && in</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">is_present) {</span>
<span class="source-lf">            lf_print(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Destination: Input %d is prime at tag (%lld, %d).</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">,</span>
<span class="source-lf">                in</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">value,</span>
<span class="source-lf">                </span><span class="source-lf variable-other-constant-reactorinstance-lflang">current_tag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf storage-type-lflang">time</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-</span><span class="source-lf"> start_time, </span><span class="source-lf variable-other-constant-reactorinstance-lflang">current_tag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">microstep</span>
<span class="source-lf">            );</span>
<span class="source-lf">        }</span>
<span class="source-lf">        if (lf_tag_compare(current_tag, self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">last_invoked) <</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">) {</span>
<span class="source-lf">            lf_print_error_and_exit(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Invoked at tag (%lld, %d), </span><span class="source-lf string-quoted-double-lflang">"</span>
<span class="source-lf">                </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">but previously invoked at tag (%lld, %d).</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">,</span>
<span class="source-lf">                </span><span class="source-lf variable-other-constant-reactorinstance-lflang">current_tag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf storage-type-lflang">time</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-</span><span class="source-lf"> start_time, </span><span class="source-lf variable-other-constant-reactorinstance-lflang">current_tag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">microstep</span><span class="source-lf">,</span>
<span class="source-lf">                self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf variable-other-constant-reactorinstance-lflang">last_invoked</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf storage-type-lflang">time</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-</span><span class="source-lf"> start_time, self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf variable-other-constant-reactorinstance-lflang">last_invoked</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">microstep</span>
<span class="source-lf">            );</span>
<span class="source-lf">        }</span>
<span class="source-lf">        self</span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf">last_invoked </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> current_tag;</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">main</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">source</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Source</span><span class="source-lf">()</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">sieve</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Sieve</span><span class="source-lf">()</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">destination</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Destination</span><span class="source-lf">()</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">source</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">out</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">sieve</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">in</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">sieve</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">out</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">destination</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">ok</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">source</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">out</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">destination</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">in</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
