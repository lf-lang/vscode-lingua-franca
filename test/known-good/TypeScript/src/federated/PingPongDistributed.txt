<span class="source-lf comment-block-lflang">/**</span><span class="source-lf comment-block-lflang"> This checks communication between federates </span><span class="source-lf comment-block-lflang">*/</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">TypeScript</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Ping</span><span class="source-lf">(count:</span><span class="source-lf storage-type-lflang"> number</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">10</span><span class="source-lf">)) {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf"> receive:</span><span class="source-lf storage-type-lflang"> number</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">output</span><span class="source-lf"> send:</span><span class="source-lf storage-type-lflang"> number</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf"> pingsLeft:</span><span class="source-lf storage-type-lflang"> number</span><span class="source-lf">(count)</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">logical</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">action</span><span class="source-lf"> serve</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">startup</span><span class="source-lf">, serve) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> send {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">console</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">log</span><span class="source-lf">(`At lo${</span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getElapsedLogicalTime</span><span class="source-lf">()}, Ping sending ${pingsLeft}`);</span>
<span class="source-lf">        send </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> pingsLeft;</span>
<span class="source-lf">        pingsLeft </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> pingsLeft </span><span class="source-lf keyword-operator-lflang">-</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">;</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(receive) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> serve {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        if(pingsLeft > </span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">){</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">actions</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-constant-reactorinstance-lflang">serve</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">schedule</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">, null);</span>
<span class="source-lf">        }</span>
<span class="source-lf">        else{</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">requestStop</span><span class="source-lf">();</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Pong</span><span class="source-lf">(expected:</span><span class="source-lf storage-type-lflang"> number</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">10</span><span class="source-lf">)) {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf"> receive:</span><span class="source-lf storage-type-lflang"> number</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">output</span><span class="source-lf"> send:</span><span class="source-lf storage-type-lflang"> number</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf"> count:</span><span class="source-lf storage-type-lflang"> number</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(receive) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> send {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        count </span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">;</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">console</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">log</span><span class="source-lf">(`At </span><span class="source-lf storage-modifier-lflang">logical</span><span class="source-lf"> </span><span class="source-lf storage-type-lflang">time</span><span class="source-lf"> ${</span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getElapsedLogicalTime</span><span class="source-lf">()}, Pong received ${receive}`)</span>
<span class="source-lf">        send </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> receive;</span>
<span class="source-lf">        if (count </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> expected){</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">requestStop</span><span class="source-lf">();</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">shutdown</span><span class="source-lf">) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        if (count !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> expected){</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">requestErrorStop</span><span class="source-lf">(`Pong expected to receive ${expected} inputs, but it received ${count}`);</span>
<span class="source-lf">        }</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">console</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">log</span><span class="source-lf">(`Pong received ${count} pings</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">`);</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">federated</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">PingPongDistributed</span><span class="source-lf">(count:</span><span class="source-lf storage-type-lflang"> number</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">10</span><span class="source-lf">)) {</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">ping</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Ping</span><span class="source-lf">(count </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> count)</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">pong</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Pong</span><span class="source-lf">(expected </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> count)</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">ping</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">send</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">pong</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">receive</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">pong</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">send</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">ping</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">receive</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
