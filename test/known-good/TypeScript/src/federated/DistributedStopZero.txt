<span class="source-lf comment-block-lflang">/**</span>
<span class="source-lf comment-block-lflang"> * Test for util.requestStop() in federated execution with centralized</span>
<span class="source-lf comment-block-lflang"> * coordination at tag ((0 secs, 0 nsecs), 0).</span>
<span class="source-lf comment-block-lflang"> *</span>
<span class="source-lf comment-block-lflang"> * @author Soroush Bateni</span>
<span class="source-lf comment-block-lflang"> * @author Byeong-gil Jun</span>
<span class="source-lf comment-block-lflang"> </span><span class="source-lf comment-block-lflang">*/</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">TypeScript</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Sender</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">output</span><span class="source-lf"> out:</span><span class="source-lf storage-type-lflang"> number</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">timer</span><span class="source-lf"> t(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">, </span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">usec</span><span class="source-lf">)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(t) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> out {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">console</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">log</span><span class="source-lf">(`Sending </span><span class="source-lf constant-numeric-int-lflang">42</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">at</span><span class="source-lf"> ${</span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getElapsedLogicalTime</span><span class="source-lf">()}, `</span>
<span class="source-lf">            </span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf"> `${</span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getCurrentTag</span><span class="source-lf">()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">microstep})</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">`);</span>
<span class="source-lf">        out </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">42</span><span class="source-lf">;</span>
<span class="source-lf"></span>
<span class="source-lf">        let zero </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getStartTag</span><span class="source-lf">();</span>
<span class="source-lf">        if (</span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getCurrentTag</span><span class="source-lf">()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">isSimultaneousWith(zero)) {</span>
<span class="source-lf comment-line-double-dash-lflang">            </span><span class="source-lf comment-line-double-dash-lflang">// Request stop at ((0 secs, 0 nsecs), 0)</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">console</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">log</span><span class="source-lf">(`Requesting stop </span><span class="source-lf storage-modifier-lflang">at</span><span class="source-lf"> ${</span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getElapsedLogicalTime</span><span class="source-lf">()}, `</span>
<span class="source-lf">                </span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf"> `${</span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getCurrentTag</span><span class="source-lf">()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">microstep})</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">`);</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">requestStop</span><span class="source-lf">();</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">shutdown</span><span class="source-lf">) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        if (!</span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getElapsedLogicalTime</span><span class="source-lf">()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">isEqualTo(</span><span class="source-lf variable-other-constant-reactorinstance-lflang">TimeValue</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf constant-numeric-lflang">usec</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">))||</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getCurrentTag</span><span class="source-lf">()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">microstep !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">) {</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">requestErrorStop</span><span class="source-lf">(`ERROR:</span><span class="source-lf entity-name-type-lflang"> Sender</span><span class="source-lf"> failed to stop the federation in </span><span class="source-lf storage-type-lflang">time</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf"> `</span>
<span class="source-lf">                </span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf"> `Stopping </span><span class="source-lf storage-modifier-lflang">at</span><span class="source-lf"> (${</span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getElapsedLogicalTime</span><span class="source-lf">()}, ${</span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getCurrentTag</span><span class="source-lf">()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">microstep})</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">`);</span>
<span class="source-lf">        }</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">console</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">log</span><span class="source-lf">(`SUCCESS:</span><span class="source-lf entity-name-type-lflang"> Successfully</span><span class="source-lf"> stopped the federation </span><span class="source-lf storage-modifier-lflang">at</span><span class="source-lf"> `</span>
<span class="source-lf">            </span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf"> `(${</span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getElapsedLogicalTime</span><span class="source-lf">()}, ${</span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getCurrentTag</span><span class="source-lf">()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">microstep})</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">`);</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Receiver</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf"> in1:</span><span class="source-lf storage-type-lflang"> number</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(in1) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">console</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">log</span><span class="source-lf">(`Received ${in1} </span><span class="source-lf storage-modifier-lflang">at</span><span class="source-lf"> (${</span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getElapsedLogicalTime</span><span class="source-lf">()}, `</span>
<span class="source-lf">            </span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf"> `${</span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getCurrentTag</span><span class="source-lf">()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">microstep})</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">`);</span>
<span class="source-lf">        let zero </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getStartTag</span><span class="source-lf">();</span>
<span class="source-lf">        if (</span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getCurrentTag</span><span class="source-lf">()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">isSimultaneousWith(zero)) {</span>
<span class="source-lf comment-line-double-dash-lflang">            </span><span class="source-lf comment-line-double-dash-lflang">// Request stop at ((0 secs, 0 nsecs), 0)</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">console</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">log</span><span class="source-lf">(`Requesting stop </span><span class="source-lf storage-modifier-lflang">at</span><span class="source-lf"> ${</span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getElapsedLogicalTime</span><span class="source-lf">()}, `</span>
<span class="source-lf">                </span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf"> `${</span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getCurrentTag</span><span class="source-lf">()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">microstep})</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">`);</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">requestStop</span><span class="source-lf">();</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">shutdown</span><span class="source-lf">) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// Sender should have requested stop earlier than the receiver.</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// Therefore, the shutdown events must occur at ((0 secs, 0 nsecs), 0) on the</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// receiver.</span>
<span class="source-lf">        if (!</span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getElapsedLogicalTime</span><span class="source-lf">()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">isEqualTo(</span><span class="source-lf variable-other-constant-reactorinstance-lflang">TimeValue</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf constant-numeric-lflang">usec</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">)) ||</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getCurrentTag</span><span class="source-lf">()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">microstep !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">) {</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">requestErrorStop</span><span class="source-lf">(`ERROR:</span><span class="source-lf entity-name-type-lflang"> Receiver</span><span class="source-lf"> failed to stop the federation </span><span class="source-lf storage-modifier-lflang">at</span><span class="source-lf"> the right </span><span class="source-lf storage-type-lflang">time</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf"> `</span>
<span class="source-lf">                </span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf"> `Stopping </span><span class="source-lf storage-modifier-lflang">at</span><span class="source-lf"> (${</span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getElapsedLogicalTime</span><span class="source-lf">()}, ${</span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getCurrentTag</span><span class="source-lf">()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">microstep})</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">`);</span>
<span class="source-lf">        }</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">console</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">log</span><span class="source-lf">(`SUCCESS:</span><span class="source-lf entity-name-type-lflang"> Successfully</span><span class="source-lf"> stopped the federation </span><span class="source-lf storage-modifier-lflang">at</span><span class="source-lf"> `</span>
<span class="source-lf">            </span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf"> `(${</span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getElapsedLogicalTime</span><span class="source-lf">()}, ${</span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getCurrentTag</span><span class="source-lf">()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">microstep})</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">`);</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">federated</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">sender</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Sender</span><span class="source-lf">()</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">receiver</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Receiver</span><span class="source-lf">()</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">sender</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">out</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">receiver</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">in1</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
