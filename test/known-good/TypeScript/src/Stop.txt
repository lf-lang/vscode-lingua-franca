<span class="source-lf comment-block-lflang">/**</span>
<span class="source-lf comment-block-lflang"> * A test for the util.requestStop() functionality in TypeScript target Lingua</span>
<span class="source-lf comment-block-lflang"> * Franca.</span>
<span class="source-lf comment-block-lflang"> *</span>
<span class="source-lf comment-block-lflang"> * @author Soroush Bateni</span>
<span class="source-lf comment-block-lflang"> * @author Byeong-gil Jun</span>
<span class="source-lf comment-block-lflang"> </span><span class="source-lf comment-block-lflang">*/</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">TypeScript</span><span class="source-lf meta-targetspec-lflang"> {</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">    timeout</span><span class="source-lf meta-targetspec-lflang">: </span><span class="source-lf meta-targetspec-lflang constant-numeric-int-lflang">11</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-numeric-lflang">msec</span>
<span class="source-lf meta-targetspec-lflang">}</span>
<span class="source-lf"></span>
<span class="source-lf keyword-control-import-lflang">import</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Sender</span><span class="source-lf"> </span><span class="source-lf keyword-control-import-lflang">from</span><span class="source-lf"> </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">lib/LoopedActionSender.lf</span><span class="source-lf string-quoted-double-lflang">"</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Consumer</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf"> in1:</span><span class="source-lf storage-type-lflang"> number</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf"> reactionInvokedCorrectly:</span><span class="source-lf storage-type-lflang"> boolean</span><span class="source-lf">(</span><span class="source-lf constant-language-lflang">false</span><span class="source-lf">)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(in1) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        </span><span class="source-lf storage-modifier-lflang">const</span><span class="source-lf"> currentTag </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getCurrentTag</span><span class="source-lf">();</span>
<span class="source-lf">        </span><span class="source-lf storage-modifier-lflang">const</span><span class="source-lf"> compareTag </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getStartTag</span><span class="source-lf">()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">getLaterTag(</span><span class="source-lf variable-other-constant-reactorinstance-lflang">TimeValue</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">10</span><span class="source-lf">));</span>
<span class="source-lf">        if (</span><span class="source-lf variable-other-constant-reactorinstance-lflang">compareTag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getMicroStepsLater</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">9</span><span class="source-lf">)</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">isSmallerThan(currentTag)) {</span>
<span class="source-lf comment-line-double-dash-lflang">            </span><span class="source-lf comment-line-double-dash-lflang">// The reaction should not have been called at tags larger than (10 msec, 9)</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">requestErrorStop</span><span class="source-lf">(`ERROR:</span><span class="source-lf entity-name-type-lflang"> Invoked</span><span class="source-lf"> </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(in) </span><span class="source-lf storage-modifier-lflang">at</span><span class="source-lf"> tag bigger than </span><span class="source-lf support-variable-lflang">shutdown</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">`);</span>
<span class="source-lf">        } else if (</span><span class="source-lf variable-other-constant-reactorinstance-lflang">currentTag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">isSimultaneousWith</span><span class="source-lf">(</span><span class="source-lf variable-other-constant-reactorinstance-lflang">compareTag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getMicroStepsLater</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">8</span><span class="source-lf">))) {</span>
<span class="source-lf comment-line-double-dash-lflang">            </span><span class="source-lf comment-line-double-dash-lflang">// Call util.requestStop() at relative tag (10 msec, 8)</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">console</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">log</span><span class="source-lf">(`Requesting stop</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">`);</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">requestStop</span><span class="source-lf">();</span>
<span class="source-lf">        } else if (</span><span class="source-lf variable-other-constant-reactorinstance-lflang">currentTag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">isSimultaneousWith</span><span class="source-lf">(</span><span class="source-lf variable-other-constant-reactorinstance-lflang">compareTag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getMicroStepsLater</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">9</span><span class="source-lf">))) {</span>
<span class="source-lf comment-line-double-dash-lflang">            </span><span class="source-lf comment-line-double-dash-lflang">// Check that this reaction is indeed also triggered at (10 msec, 9)</span>
<span class="source-lf">            reactionInvokedCorrectly </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-language-lflang">true</span><span class="source-lf">;</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">shutdown</span><span class="source-lf">) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        </span><span class="source-lf storage-modifier-lflang">const</span><span class="source-lf"> currentTag </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getCurrentTag</span><span class="source-lf">();</span>
<span class="source-lf">        </span><span class="source-lf storage-modifier-lflang">const</span><span class="source-lf"> compareTag </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getStartTag</span><span class="source-lf">()</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">getLaterTag(</span><span class="source-lf variable-other-constant-reactorinstance-lflang">TimeValue</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">10</span><span class="source-lf">));</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// Check to see if shutdown is called at relative tag (10 msec, 9)</span>
<span class="source-lf">        if (</span><span class="source-lf variable-other-constant-reactorinstance-lflang">currentTag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">isSimultaneousWith</span><span class="source-lf">(</span><span class="source-lf variable-other-constant-reactorinstance-lflang">compareTag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getMicroStepsLater</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">9</span><span class="source-lf">)) &&</span>
<span class="source-lf">            reactionInvokedCorrectly </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-language-lflang">true</span><span class="source-lf">) {</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">console</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">log</span><span class="source-lf">(`SUCCESS:</span><span class="source-lf storage-type-lflang"> successfully</span><span class="source-lf"> enforced stop</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">`);</span>
<span class="source-lf">        } else if(!</span><span class="source-lf variable-other-constant-reactorinstance-lflang">currentTag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">isSmallerThan</span><span class="source-lf">(</span><span class="source-lf variable-other-constant-reactorinstance-lflang">compareTag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getMicroStepsLater</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">9</span><span class="source-lf">)) &&</span>
<span class="source-lf">            !</span><span class="source-lf variable-other-constant-reactorinstance-lflang">currentTag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">isSimultaneousWith</span><span class="source-lf">(</span><span class="source-lf variable-other-constant-reactorinstance-lflang">compareTag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getMicroStepsLater</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">9</span><span class="source-lf">))) {</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">requestErrorStop</span><span class="source-lf">(`ERROR:</span><span class="source-lf entity-name-type-lflang"> Shutdown</span><span class="source-lf"> invoked </span><span class="source-lf storage-modifier-lflang">at</span><span class="source-lf"> tag `</span>
<span class="source-lf">                </span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf"> `(${</span><span class="source-lf variable-other-constant-reactorinstance-lflang">currentTag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf storage-type-lflang">time</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">subtract</span><span class="source-lf">(</span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getStartTime</span><span class="source-lf">())}, `</span>
<span class="source-lf">                </span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf"> `${</span><span class="source-lf variable-other-constant-reactorinstance-lflang">currentTag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">microstep</span><span class="source-lf">})</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf"> Failed to enforce timeout</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">`);</span>
<span class="source-lf">        } else if (reactionInvokedCorrectly </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-language-lflang">false</span><span class="source-lf">) {</span>
<span class="source-lf comment-line-double-dash-lflang">            </span><span class="source-lf comment-line-double-dash-lflang">// Check to see if reactions were called correctly</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">requestErrorStop</span><span class="source-lf">(`ERROR:</span><span class="source-lf entity-name-type-lflang"> Failed</span><span class="source-lf"> to invoke </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(in) </span><span class="source-lf storage-modifier-lflang">at</span><span class="source-lf"> tag `</span>
<span class="source-lf">                </span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf"> `(${</span><span class="source-lf variable-other-constant-reactorinstance-lflang">currentTag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf storage-type-lflang">time</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">subtract</span><span class="source-lf">(</span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">getStartTime</span><span class="source-lf">())}, `</span>
<span class="source-lf">                </span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf"> `${</span><span class="source-lf variable-other-constant-reactorinstance-lflang">currentTag</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">microstep</span><span class="source-lf">})</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf"> Failed to enforce timeout</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">`);</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">main</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">consumer</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Consumer</span><span class="source-lf">()</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">producer</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Sender</span><span class="source-lf">(breakInterval </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">producer</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">out</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">consumer</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">in1</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
