<span class="source-lf comment-line-double-dash-lflang">// Source produces a dynamically allocated object, which it passes to Print.</span>
<span class="source-lf comment-line-double-dash-lflang">// Reference counting ensures that the struct is freed.</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">TypeScript</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">SendsPointer</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">output</span><span class="source-lf"> out: {</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> {value:</span><span class="source-lf storage-type-lflang"> number</span><span class="source-lf">} </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">startup</span><span class="source-lf">) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> out {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        let my_object </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> { value:</span><span class="source-lf storage-type-lflang"> 42</span><span class="source-lf"> };</span>
<span class="source-lf">        out </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> my_object;</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf comment-line-double-dash-lflang">// expected parameter is for testing.</span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Print</span><span class="source-lf">(expected: {</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> {value:</span><span class="source-lf storage-type-lflang"> number</span><span class="source-lf">} </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}({</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> { value:</span><span class="source-lf storage-type-lflang"> 42</span><span class="source-lf"> } </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">})) {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf"> x: {</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> {value:</span><span class="source-lf storage-type-lflang"> number</span><span class="source-lf">} </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(x) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        x </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> x as {value:</span><span class="source-lf storage-type-lflang"> number</span><span class="source-lf">};</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">console</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">log</span><span class="source-lf">(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Received: </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">JSON</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">stringify</span><span class="source-lf">(x));</span>
<span class="source-lf">        if (</span><span class="source-lf variable-other-constant-reactorinstance-lflang">x</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">value</span><span class="source-lf"> !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">expected</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">value</span><span class="source-lf">) {</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">util</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">requestErrorStop</span><span class="source-lf">(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">ERROR: Expected x.value to be </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">expected</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">value</span><span class="source-lf">);</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">main</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">SendsPointerTest</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">s</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">SendsPointer</span><span class="source-lf">()</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">p</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Print</span><span class="source-lf">()</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">s</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">out</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">p</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">x</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
