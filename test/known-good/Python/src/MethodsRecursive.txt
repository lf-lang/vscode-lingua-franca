<span class="source-lf comment-line-double-dash-lflang"># Test ability of methods to call each other and (recursively) themselves.</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">Python</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">main</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf"> foo(</span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf">)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">method</span><span class="source-lf entity-name-function-member-lflang"> fib</span><span class="source-lf">(n) </span><span class="source-lf meta-embedded-block-py">{=</span><span class="source-lf meta-embedded-block-py">  # Return the n-th Fibonacci number.</span>
<span class="source-lf meta-embedded-block-py">        if n <= 1:</span>
<span class="source-lf meta-embedded-block-py">            return 1</span>
<span class="source-lf meta-embedded-block-py">        return self.add(self.fib(n-1), self.fib(n-2))</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">method</span><span class="source-lf entity-name-function-member-lflang"> add</span><span class="source-lf">(x, y) </span><span class="source-lf meta-embedded-block-py">{=</span><span class="source-lf meta-embedded-block-py"> return x + y </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">startup</span><span class="source-lf">) </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">        for n in range(1, 10):</span>
<span class="source-lf meta-embedded-block-py">            print(f"{n}-th Fibonacci number is {self.fib(n)}")</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
