<span class="source-lf comment-block-lflang">/**</span>
<span class="source-lf comment-block-lflang"> * This tests an output that is broadcast back to a multiport input of a bank.</span>
<span class="source-lf comment-block-lflang"> </span><span class="source-lf comment-block-lflang">*/</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">Python</span><span class="source-lf meta-targetspec-lflang"> {</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">    timeout</span><span class="source-lf meta-targetspec-lflang">: </span><span class="source-lf meta-targetspec-lflang constant-numeric-int-lflang">1</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-numeric-lflang">sec</span>
<span class="source-lf meta-targetspec-lflang">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">R</span><span class="source-lf">(bank_index(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">)) {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">output</span><span class="source-lf">[</span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf">] out</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf">[</span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf">] inp</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf"> received(</span><span class="source-lf constant-language-lflang">false</span><span class="source-lf">)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">startup</span><span class="source-lf">) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> out </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">        for (i, p) in enumerate(out):</span>
<span class="source-lf meta-embedded-block-py">            value = self.bank_index * 2 + i</span>
<span class="source-lf meta-embedded-block-py">            p.set(value)</span>
<span class="source-lf meta-embedded-block-py">            print(f"Inner sending {value} to bank {self.bank_index} channel {i}.")</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(inp) </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">        for (i, p) in enumerate(inp):</span>
<span class="source-lf meta-embedded-block-py">            if p.is_present:</span>
<span class="source-lf meta-embedded-block-py">                print(f"Inner received {p.value} in bank {self.bank_index}, channel {i}")</span>
<span class="source-lf meta-embedded-block-py">                self.received = True</span>
<span class="source-lf meta-embedded-block-py">                if p.value != (self.bank_index * 2 + i):</span>
<span class="source-lf meta-embedded-block-py">                    sys.stderr.write(f"ERROR: Expected {self.bank_index * 2 + i}.\n")</span>
<span class="source-lf meta-embedded-block-py">                    exit(1)</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">shutdown</span><span class="source-lf">) </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">        print("Inner shutdown invoked.")</span>
<span class="source-lf meta-embedded-block-py">        if self.received is not True:</span>
<span class="source-lf meta-embedded-block-py">            sys.stderr.write(f"ERROR: Received no input.")</span>
<span class="source-lf meta-embedded-block-py">            exit(1)</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">main</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">s</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf">[</span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf">] R()</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf"> received(</span><span class="source-lf constant-language-lflang">false</span><span class="source-lf">)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">startup</span><span class="source-lf">) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">s</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">inp</span><span class="source-lf"> </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">        count = 0</span>
<span class="source-lf meta-embedded-block-py">        for i in range(len(s)):</span>
<span class="source-lf meta-embedded-block-py">            for (j, p) in enumerate(s[i].inp):</span>
<span class="source-lf meta-embedded-block-py">                print(f"Sending {count} to bank {i} channel {j}.")</span>
<span class="source-lf meta-embedded-block-py">                p.set(count)</span>
<span class="source-lf meta-embedded-block-py">                count+=1</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf variable-other-constant-reactorinstance-lflang">s</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">out</span><span class="source-lf">) </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">        for i in range(len(s)):</span>
<span class="source-lf meta-embedded-block-py">            for (j, p) in enumerate(s[i].out):</span>
<span class="source-lf meta-embedded-block-py">                if p.is_present:</span>
<span class="source-lf meta-embedded-block-py">                    print(f"Outer received {p.value} on bank {i} channel {j}.")</span>
<span class="source-lf meta-embedded-block-py">                    self.received = True</span>
<span class="source-lf meta-embedded-block-py">                    if p.value != i * 2 + j:</span>
<span class="source-lf meta-embedded-block-py">                        sys.stderr.write(f"ERROR: Expected {i*2+j}.\n")</span>
<span class="source-lf meta-embedded-block-py">                        exit(1)</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">shutdown</span><span class="source-lf">) </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">        print("Outer shutdown invoked.")</span>
<span class="source-lf meta-embedded-block-py">        if self.received is not True:</span>
<span class="source-lf meta-embedded-block-py">            sys.stderr.write(f"ERROR: Received no input.\n")</span>
<span class="source-lf meta-embedded-block-py">            exit(1)</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
