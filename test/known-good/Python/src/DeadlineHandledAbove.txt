<span class="source-lf comment-line-double-dash-lflang"># Test a deadline where the deadline violation produces an output and the container reacts to that</span>
<span class="source-lf comment-line-double-dash-lflang"># output.</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">Python</span>
<span class="source-lf"></span>
<span class="source-lf keyword-control-lflang">preamble</span><span class="source-lf"> </span><span class="source-lf meta-embedded-block-py">{=</span><span class="source-lf meta-embedded-block-py"> </span><span class="source-lf meta-embedded-block-py keyword-control-import-python">import</span><span class="source-lf meta-embedded-block-py"> time </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Deadline</span><span class="source-lf">(threshold </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">100</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">) {</span>
<span class="source-lf">  </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf"> x</span>
<span class="source-lf">  </span><span class="source-lf storage-modifier-lflang">output</span><span class="source-lf"> deadline_violation</span>
<span class="source-lf"></span>
<span class="source-lf">  </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(x) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> deadline_violation </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">    sys.stderr.write("ERROR: Deadline violation was not detected!\n")</span>
<span class="source-lf meta-embedded-block-py">    exit(1)</span>
<span class="source-lf meta-embedded-block-py">  </span><span class="source-lf meta-embedded-block-py">=}</span><span class="source-lf"> </span><span class="source-lf keyword-control-lflang">deadline</span><span class="source-lf">(threshold) </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">    print("Deadline violation detected.")</span>
<span class="source-lf meta-embedded-block-py">    deadline_violation.set(True)</span>
<span class="source-lf meta-embedded-block-py">  </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">main</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">DeadlineHandledAbove</span><span class="source-lf"> {</span>
<span class="source-lf">  </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf"> violation_detected </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-language-lflang">False</span>
<span class="source-lf">  </span><span class="source-lf variable-other-constant-reactorinstance-lflang">d</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Deadline</span><span class="source-lf">(threshold </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">10</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">)</span>
<span class="source-lf"></span>
<span class="source-lf">  </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">startup</span><span class="source-lf">) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">d</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">x</span><span class="source-lf"> </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">    time.sleep(0.2)</span>
<span class="source-lf meta-embedded-block-py">    d.x.set(42)</span>
<span class="source-lf meta-embedded-block-py">  </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf"></span>
<span class="source-lf">  </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf variable-other-constant-reactorinstance-lflang">d</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">deadline_violation</span><span class="source-lf">) </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">    if d.deadline_violation.value is True:</span>
<span class="source-lf meta-embedded-block-py">        print("Output successfully produced by deadline miss handler.")</span>
<span class="source-lf meta-embedded-block-py">        self.violation_detected = True</span>
<span class="source-lf meta-embedded-block-py">  </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf"></span>
<span class="source-lf">  </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">shutdown</span><span class="source-lf">) </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">    if self.violation_detected is True:</span>
<span class="source-lf meta-embedded-block-py">        print("SUCCESS. Test passes.")</span>
<span class="source-lf meta-embedded-block-py">    else:</span>
<span class="source-lf meta-embedded-block-py">        sys.stderr.write("FAILURE. Container did not react to deadline violation.\n")</span>
<span class="source-lf meta-embedded-block-py">        exit(2)</span>
<span class="source-lf meta-embedded-block-py">  </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
