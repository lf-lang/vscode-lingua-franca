<span class="source-lf comment-block-lflang">/**</span>
<span class="source-lf comment-block-lflang"> * Modal Reactor Test. Checks disabling of reactions indirectly nested in an</span>
<span class="source-lf comment-block-lflang"> * inactive mode</span>
<span class="source-lf comment-block-lflang"> </span><span class="source-lf comment-block-lflang">*/</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">Python</span><span class="source-lf meta-targetspec-lflang"> {</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">    fast</span><span class="source-lf meta-targetspec-lflang">: </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">false</span><span class="source-lf meta-targetspec-lflang">,</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">    timeout</span><span class="source-lf meta-targetspec-lflang">: </span><span class="source-lf meta-targetspec-lflang constant-numeric-int-lflang">2</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-numeric-lflang">sec</span>
<span class="source-lf meta-targetspec-lflang">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">CounterCycle</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf"> next</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">output</span><span class="source-lf"> count</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">output</span><span class="source-lf"> only_in_two</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">output</span><span class="source-lf"> never</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">initial</span><span class="source-lf"> </span><span class="source-lf keyword-control-lflang">mode</span><span class="source-lf"> One {</span>
<span class="source-lf">        </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(next) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> count, </span><span class="source-lf keyword-control-lflang">reset</span><span class="source-lf">(Two) </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">            count.set(1)</span>
<span class="source-lf meta-embedded-block-py">            Two.set()</span>
<span class="source-lf meta-embedded-block-py">        </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf">    }</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">mode</span><span class="source-lf"> Two {</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">fwd</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Forward</span><span class="source-lf">()</span>
<span class="source-lf">        next </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">fwd</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">inp</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">fwd</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">out</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> only_in_two</span>
<span class="source-lf">        </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(next) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> count, </span><span class="source-lf keyword-control-lflang">reset</span><span class="source-lf">(One) </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">            count.set(2)</span>
<span class="source-lf meta-embedded-block-py">            One.set()</span>
<span class="source-lf meta-embedded-block-py">        </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf">    }</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">mode</span><span class="source-lf"> Three {</span>
<span class="source-lf">        </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(next) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> never </span><span class="source-lf meta-embedded-block-py">{=</span><span class="source-lf meta-embedded-block-py"> never.set(True) </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf">    }</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Forward</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf"> inp</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">output</span><span class="source-lf"> out</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(inp) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> out </span><span class="source-lf meta-embedded-block-py">{=</span><span class="source-lf meta-embedded-block-py"> out.set(inp.value) </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">main</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">timer</span><span class="source-lf"> stepper(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">, </span><span class="source-lf constant-numeric-int-lflang">250</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">counter</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">CounterCycle</span><span class="source-lf">()</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(stepper) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">counter</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">next</span><span class="source-lf"> </span><span class="source-lf meta-embedded-block-py">{=</span><span class="source-lf meta-embedded-block-py"> counter.next.set(True) </span><span class="source-lf meta-embedded-block-py">=}</span><span class="source-lf">  </span><span class="source-lf comment-line-double-dash-lflang"># Trigger</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(stepper) </span><span class="source-lf variable-other-constant-reactorinstance-lflang">counter</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">count</span><span class="source-lf">, </span><span class="source-lf variable-other-constant-reactorinstance-lflang">counter</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">only_in_two</span><span class="source-lf"> </span><span class="source-lf meta-embedded-block-py">{=</span><span class="source-lf meta-embedded-block-py">  # Check</span>
<span class="source-lf meta-embedded-block-py">        print(counter.count.value)</span>
<span class="source-lf meta-embedded-block-py"></span>
<span class="source-lf meta-embedded-block-py">        if counter.count.is_present is not True:</span>
<span class="source-lf meta-embedded-block-py">            sys.stderr.write("ERROR: Missing mode change.\n")</span>
<span class="source-lf meta-embedded-block-py">            exit(1)</span>
<span class="source-lf meta-embedded-block-py">        elif counter.only_in_two.is_present and (counter.count.value != 2):</span>
<span class="source-lf meta-embedded-block-py">            sys.stderr.write("ERROR: Indirectly nested reaction was not properly deactivated.\n")</span>
<span class="source-lf meta-embedded-block-py">            exit(2)</span>
<span class="source-lf meta-embedded-block-py">        elif counter.only_in_two.is_present is not True and (counter.count.value == 2):</span>
<span class="source-lf meta-embedded-block-py">            sys.stderr.write("ERROR: Missing output from indirectly nested reaction.\n")</span>
<span class="source-lf meta-embedded-block-py">            exit(3)</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf variable-other-constant-reactorinstance-lflang">counter</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">never</span><span class="source-lf">) </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">        sys.stderr.write("ERROR: Detected output from unreachable mode.\n")</span>
<span class="source-lf meta-embedded-block-py">        exit(4)</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
