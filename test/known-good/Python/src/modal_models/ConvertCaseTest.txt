<span class="source-lf comment-block-lflang">/**</span><span class="source-lf comment-block-lflang"> Modal Reactor Test. Tests nested reactors with modes. </span><span class="source-lf comment-block-lflang">*/</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">Python</span><span class="source-lf meta-targetspec-lflang"> {</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">    fast</span><span class="source-lf meta-targetspec-lflang">: </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">false</span><span class="source-lf meta-targetspec-lflang">,</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">    timeout</span><span class="source-lf meta-targetspec-lflang">: </span><span class="source-lf meta-targetspec-lflang constant-numeric-int-lflang">4</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-numeric-lflang">sec</span>
<span class="source-lf meta-targetspec-lflang">}</span>
<span class="source-lf"></span>
<span class="source-lf keyword-control-import-lflang">import</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">TraceTesting</span><span class="source-lf"> </span><span class="source-lf keyword-control-import-lflang">from</span><span class="source-lf"> </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">util/TraceTesting.lf</span><span class="source-lf string-quoted-double-lflang">"</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">ResetProcessor</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf"> discard</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf"> character</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">output</span><span class="source-lf"> converted</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">initial</span><span class="source-lf"> </span><span class="source-lf keyword-control-lflang">mode</span><span class="source-lf"> Converting {</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">converter</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Converter</span><span class="source-lf">()</span>
<span class="source-lf">        character </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">converter</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">raw</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">converter</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">converted</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> converted</span>
<span class="source-lf">        </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(discard) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf keyword-control-lflang">reset</span><span class="source-lf">(Discarding) </span><span class="source-lf meta-embedded-block-py">{=</span><span class="source-lf meta-embedded-block-py"> Discarding.set() </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf">    }</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">mode</span><span class="source-lf"> Discarding {</span>
<span class="source-lf">        </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(character) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> converted </span><span class="source-lf meta-embedded-block-py">{=</span><span class="source-lf meta-embedded-block-py"> converted.set('_') </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf"></span>
<span class="source-lf">        </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(character) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf keyword-control-lflang">reset</span><span class="source-lf">(Converting) </span><span class="source-lf meta-embedded-block-py">{=</span><span class="source-lf meta-embedded-block-py"> Converting.set() </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf">    }</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">HistoryProcessor</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf"> discard</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf"> character</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">output</span><span class="source-lf"> converted</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">initial</span><span class="source-lf"> </span><span class="source-lf keyword-control-lflang">mode</span><span class="source-lf"> Converting {</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">converter</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Converter</span><span class="source-lf">()</span>
<span class="source-lf">        character </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">converter</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">raw</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">converter</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">converted</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> converted</span>
<span class="source-lf">        </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(discard) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf keyword-control-lflang">reset</span><span class="source-lf">(Discarding) </span><span class="source-lf meta-embedded-block-py">{=</span><span class="source-lf meta-embedded-block-py"> Discarding.set() </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf">    }</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">mode</span><span class="source-lf"> Discarding {</span>
<span class="source-lf">        </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(character) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> converted </span><span class="source-lf meta-embedded-block-py">{=</span><span class="source-lf meta-embedded-block-py"> converted.set('_') </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf"></span>
<span class="source-lf">        </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(character) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> history(Converting) </span><span class="source-lf meta-embedded-block-py">{=</span><span class="source-lf meta-embedded-block-py"> Converting.set() </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf">    }</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Converter</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf"> raw</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">output</span><span class="source-lf"> converted</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">initial</span><span class="source-lf"> </span><span class="source-lf keyword-control-lflang">mode</span><span class="source-lf"> Upper {</span>
<span class="source-lf">        </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(raw) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> converted, </span><span class="source-lf keyword-control-lflang">reset</span><span class="source-lf">(Lower) </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">            character = raw.value.upper()</span>
<span class="source-lf meta-embedded-block-py">            converted.set(character)</span>
<span class="source-lf meta-embedded-block-py">            if character == ' ':</span>
<span class="source-lf meta-embedded-block-py">                Lower.set()</span>
<span class="source-lf meta-embedded-block-py">        </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf">    }</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">mode</span><span class="source-lf"> Lower {</span>
<span class="source-lf">        </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(raw) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> converted, </span><span class="source-lf keyword-control-lflang">reset</span><span class="source-lf">(Upper) </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">            character = raw.value.lower()</span>
<span class="source-lf meta-embedded-block-py">            converted.set(character)</span>
<span class="source-lf meta-embedded-block-py">            if character == ' ':</span>
<span class="source-lf meta-embedded-block-py">                Upper.set()</span>
<span class="source-lf meta-embedded-block-py">        </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf">    }</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">InputFeeder</span><span class="source-lf">(message(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">)) {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">output</span><span class="source-lf"> character</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf"> idx(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">timer</span><span class="source-lf"> t(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">, </span><span class="source-lf constant-numeric-int-lflang">250</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(t) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> character </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">        if self.idx < len(self.message):</span>
<span class="source-lf meta-embedded-block-py">            character.set(self.message[self.idx])</span>
<span class="source-lf meta-embedded-block-py">            self.idx += 1</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">main</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">timer</span><span class="source-lf"> stepper(</span><span class="source-lf constant-numeric-int-lflang">500</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">, </span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">sec</span><span class="source-lf">)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">feeder</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">InputFeeder</span><span class="source-lf">(message </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Hello World!</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">reset_processor</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">ResetProcessor</span><span class="source-lf">()</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">history_processor</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">HistoryProcessor</span><span class="source-lf">()</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">feeder</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">character</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">reset_processor</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">character</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">feeder</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">character</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">history_processor</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">character</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">test</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">TraceTesting</span><span class="source-lf">(events_size </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf">, trace </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> (  </span><span class="source-lf comment-line-double-dash-lflang">// keep-format</span>
<span class="source-lf">        </span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">, </span><span class="source-lf constant-language-lflang">True</span><span class="source-lf">, </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang">H</span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf">, </span><span class="source-lf constant-language-lflang">True</span><span class="source-lf">, </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang">H</span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf">,</span>
<span class="source-lf">        </span><span class="source-lf constant-numeric-int-lflang">250000000</span><span class="source-lf">, </span><span class="source-lf constant-language-lflang">True</span><span class="source-lf">, </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang">E</span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf">, </span><span class="source-lf constant-language-lflang">True</span><span class="source-lf">, </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang">E</span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf">,</span>
<span class="source-lf">        </span><span class="source-lf constant-numeric-int-lflang">250000000</span><span class="source-lf">, </span><span class="source-lf constant-language-lflang">True</span><span class="source-lf">, </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang">L</span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf">, </span><span class="source-lf constant-language-lflang">True</span><span class="source-lf">, </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang">L</span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf">,</span>
<span class="source-lf">        </span><span class="source-lf constant-numeric-int-lflang">250000000</span><span class="source-lf">, </span><span class="source-lf constant-language-lflang">True</span><span class="source-lf">, </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang">_</span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf">, </span><span class="source-lf constant-language-lflang">True</span><span class="source-lf">, </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang">_</span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf">,</span>
<span class="source-lf">        </span><span class="source-lf constant-numeric-int-lflang">250000000</span><span class="source-lf">, </span><span class="source-lf constant-language-lflang">True</span><span class="source-lf">, </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang">O</span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf">, </span><span class="source-lf constant-language-lflang">True</span><span class="source-lf">, </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang">O</span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf">,</span>
<span class="source-lf">        </span><span class="source-lf constant-numeric-int-lflang">250000000</span><span class="source-lf">, </span><span class="source-lf constant-language-lflang">True</span><span class="source-lf">, </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang"> </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf">, </span><span class="source-lf constant-language-lflang">True</span><span class="source-lf">, </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang"> </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf">,</span>
<span class="source-lf">        </span><span class="source-lf constant-numeric-int-lflang">250000000</span><span class="source-lf">, </span><span class="source-lf constant-language-lflang">True</span><span class="source-lf">, </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang">w</span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf">, </span><span class="source-lf constant-language-lflang">True</span><span class="source-lf">, </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang">w</span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf">,</span>
<span class="source-lf">        </span><span class="source-lf constant-numeric-int-lflang">250000000</span><span class="source-lf">, </span><span class="source-lf constant-language-lflang">True</span><span class="source-lf">, </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang">_</span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf">, </span><span class="source-lf constant-language-lflang">True</span><span class="source-lf">, </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang">_</span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf">,</span>
<span class="source-lf">        </span><span class="source-lf constant-numeric-int-lflang">250000000</span><span class="source-lf">, </span><span class="source-lf constant-language-lflang">True</span><span class="source-lf">, </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang">R</span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf">, </span><span class="source-lf constant-language-lflang">True</span><span class="source-lf">, </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang">r</span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf">,</span>
<span class="source-lf">        </span><span class="source-lf constant-numeric-int-lflang">250000000</span><span class="source-lf">, </span><span class="source-lf constant-language-lflang">True</span><span class="source-lf">, </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang">L</span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf">, </span><span class="source-lf constant-language-lflang">True</span><span class="source-lf">, </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang">l</span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf">,</span>
<span class="source-lf">        </span><span class="source-lf constant-numeric-int-lflang">250000000</span><span class="source-lf">, </span><span class="source-lf constant-language-lflang">True</span><span class="source-lf">, </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang">D</span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf">, </span><span class="source-lf constant-language-lflang">True</span><span class="source-lf">, </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang">d</span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf">,</span>
<span class="source-lf">        </span><span class="source-lf constant-numeric-int-lflang">250000000</span><span class="source-lf">, </span><span class="source-lf constant-language-lflang">True</span><span class="source-lf">, </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang">_</span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf">, </span><span class="source-lf constant-language-lflang">True</span><span class="source-lf">, </span><span class="source-lf string-quoted-single-lflang">'</span><span class="source-lf string-quoted-single-lflang">_</span><span class="source-lf string-quoted-single-lflang">'</span>
<span class="source-lf">    ), training </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-language-lflang">False</span><span class="source-lf">)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">reset_processor</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">converted</span><span class="source-lf">, </span><span class="source-lf variable-other-constant-reactorinstance-lflang">history_processor</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">converted</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">test</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">events</span>
<span class="source-lf"></span>
<span class="source-lf comment-line-double-dash-lflang">    </span><span class="source-lf comment-line-double-dash-lflang"># Trigger mode change</span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(stepper) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">reset_processor</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">discard</span><span class="source-lf">, </span><span class="source-lf variable-other-constant-reactorinstance-lflang">history_processor</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">discard</span><span class="source-lf"> </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">        reset_processor.discard.set(True)</span>
<span class="source-lf meta-embedded-block-py">        history_processor.discard.set(True)</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf variable-other-constant-reactorinstance-lflang">reset_processor</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">converted</span><span class="source-lf">) </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">        print(f"Reset: {reset_processor.converted.value}")</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf variable-other-constant-reactorinstance-lflang">history_processor</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">converted</span><span class="source-lf">) </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">        print(f"History: {history_processor.converted.value}")</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
