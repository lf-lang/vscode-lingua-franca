<span class="source-lf comment-block-lflang">/**</span>
<span class="source-lf comment-block-lflang"> * This is a test for send_timed_message, which is an internal API.</span>
<span class="source-lf comment-block-lflang"> *</span>
<span class="source-lf comment-block-lflang"> * This test sends a second message at time 5 msec that has the same intended</span>
<span class="source-lf comment-block-lflang"> * tag as a message that it had previously sent at time 0 msec. This results in</span>
<span class="source-lf comment-block-lflang"> * a warning, but the message microstep is incremented and correctly received</span>
<span class="source-lf comment-block-lflang"> * one microstep later.</span>
<span class="source-lf comment-block-lflang"> *</span>
<span class="source-lf comment-block-lflang"> * @author Soroush Bateni</span>
<span class="source-lf comment-block-lflang"> </span><span class="source-lf comment-block-lflang">*/</span>
<span class="source-lf comment-line-double-dash-lflang"># reason for failing: send_timed_message() is not not supported in python target</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">Python</span><span class="source-lf meta-targetspec-lflang"> {</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">    timeout</span><span class="source-lf meta-targetspec-lflang">: </span><span class="source-lf meta-targetspec-lflang constant-numeric-int-lflang">1</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-numeric-lflang">sec</span>
<span class="source-lf meta-targetspec-lflang">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Sender</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">output</span><span class="source-lf"> out</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">timer</span><span class="source-lf"> t(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">, </span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(t) </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">        int payload = 1;</span>
<span class="source-lf meta-embedded-block-py">        if (lf.time.logical_elapsed() == 0LL) {</span>
<span class="source-lf meta-embedded-block-py">            send_timed_message(MSEC(10), MSG_TYPE_TAGGED_MESSAGE, 0, 1, "federate 1", sizeof(int),</span>
<span class="source-lf meta-embedded-block-py">                                (unsigned char*)&payload);</span>
<span class="source-lf meta-embedded-block-py">        } else if (lf.time.logical_elapsed() == MSEC(5)) {</span>
<span class="source-lf meta-embedded-block-py">            payload = 2;</span>
<span class="source-lf meta-embedded-block-py">            send_timed_message(MSEC(5), MSG_TYPE_TAGGED_MESSAGE, 0, 1, "federate 1", sizeof(int),</span>
<span class="source-lf meta-embedded-block-py">                                (unsigned char*)&payload);</span>
<span class="source-lf meta-embedded-block-py">        }</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Receiver</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf"> in_</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf"> success(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(in_) </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">        tag_t current_tag = lf.tag();</span>
<span class="source-lf meta-embedded-block-py">        if (current_tag.time == (start_time + MSEC(10))) {</span>
<span class="source-lf meta-embedded-block-py">            if (current_tag.microstep == 0 && in_->value == 1) {</span>
<span class="source-lf meta-embedded-block-py">                self->success++;</span>
<span class="source-lf meta-embedded-block-py">            } else if (current_tag.microstep == 1 && in_->value == 2) {</span>
<span class="source-lf meta-embedded-block-py">                self->success++;</span>
<span class="source-lf meta-embedded-block-py">            }</span>
<span class="source-lf meta-embedded-block-py">        }</span>
<span class="source-lf meta-embedded-block-py">        printf("Received %d at tag (%lld, %u).\n",</span>
<span class="source-lf meta-embedded-block-py">               in_->value,</span>
<span class="source-lf meta-embedded-block-py">               current_tag.time,</span>
<span class="source-lf meta-embedded-block-py">               current_tag.microstep);</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">shutdown</span><span class="source-lf">) </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">        if (self->success != 2) {</span>
<span class="source-lf meta-embedded-block-py">            fprintf(stderr, "ERROR: Failed to receive messages.\n");</span>
<span class="source-lf meta-embedded-block-py">            exit(1);</span>
<span class="source-lf meta-embedded-block-py">        }</span>
<span class="source-lf meta-embedded-block-py">        printf("SUCCESS.\n");</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">federated</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">DistributedNetworkOrder</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">sender</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Sender</span><span class="source-lf">()</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">receiver</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Receiver</span><span class="source-lf">()</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">sender</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">out</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">receiver</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">in_</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
