<span class="source-lf comment-block-lflang">/**</span>
<span class="source-lf comment-block-lflang"> * This tests a feedback loop with physical actions and centralized</span>
<span class="source-lf comment-block-lflang"> * coordination.</span>
<span class="source-lf comment-block-lflang"> *</span>
<span class="source-lf comment-block-lflang"> * @author Edward A. Lee</span>
<span class="source-lf comment-block-lflang"> </span><span class="source-lf comment-block-lflang">*/</span>
<span class="source-lf comment-line-double-dash-lflang"># reason for failing: lf_comma_separated_time() not supported in the python</span>
<span class="source-lf comment-line-double-dash-lflang"># target</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">Python</span><span class="source-lf meta-targetspec-lflang"> {</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">    coordination</span><span class="source-lf meta-targetspec-lflang">: centralized,</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">    coordination-options</span><span class="source-lf meta-targetspec-lflang">: {</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">        advance-message-interval</span><span class="source-lf meta-targetspec-lflang">: </span><span class="source-lf meta-targetspec-lflang constant-numeric-int-lflang">100</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-numeric-lflang">msec</span>
<span class="source-lf meta-targetspec-lflang">    },</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">    timeout</span><span class="source-lf meta-targetspec-lflang">: </span><span class="source-lf meta-targetspec-lflang constant-numeric-int-lflang">5</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-numeric-lflang">sec</span>
<span class="source-lf meta-targetspec-lflang">}</span>
<span class="source-lf"></span>
<span class="source-lf keyword-control-lflang">preamble</span><span class="source-lf"> </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">    #include <unistd.h> // Defines sleep()</span>
<span class="source-lf meta-embedded-block-py">    bool stop = false;</span>
<span class="source-lf meta-embedded-block-py">    // Thread to trigger an action once every second.</span>
<span class="source-lf meta-embedded-block-py">    void* ping(void* actionref) {</span>
<span class="source-lf meta-embedded-block-py">        while(!stop) {</span>
<span class="source-lf meta-embedded-block-py">            lf_print("Scheduling action.");</span>
<span class="source-lf meta-embedded-block-py">            schedule(actionref, 0);</span>
<span class="source-lf meta-embedded-block-py">            sleep(1);</span>
<span class="source-lf meta-embedded-block-py">        }</span>
<span class="source-lf meta-embedded-block-py">         return NULL;</span>
<span class="source-lf meta-embedded-block-py">    }</span>
<span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Looper</span><span class="source-lf">(incr(</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">), delay(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">)) {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf"> in_</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">output</span><span class="source-lf"> out</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">physical</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">action</span><span class="source-lf"> a(delay)</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf"> count(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">startup</span><span class="source-lf">) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> a </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">        // Start the thread that listens for Enter or Return.</span>
<span class="source-lf meta-embedded-block-py">        lf_thread_t thread_id;</span>
<span class="source-lf meta-embedded-block-py">        lf_print("Starting thread.");</span>
<span class="source-lf meta-embedded-block-py">        lf_thread_create(&thread_id, &ping, a);</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(a) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> out </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">        SET(out, self->count);</span>
<span class="source-lf meta-embedded-block-py">        self->count += self->incr;</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(in_) </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">        instant_t time_lag = lf.time.physical() - lf.time.logical();</span>
<span class="source-lf meta-embedded-block-py">        char time_buffer[28]; // 28 bytes is enough for the largest 64 bit number: 9,223,372,036,854,775,807</span>
<span class="source-lf meta-embedded-block-py">        lf_comma_separated_time(time_buffer, time_lag);</span>
<span class="source-lf meta-embedded-block-py">        lf_print("Received %d. Logical time is behind physical time by %s nsec.", in_->value, time_buffer);</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">shutdown</span><span class="source-lf">) </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">        lf_print("******* Shutdown invoked.");</span>
<span class="source-lf meta-embedded-block-py">        // Stop the thread that is scheduling actions.</span>
<span class="source-lf meta-embedded-block-py">        stop = true;</span>
<span class="source-lf meta-embedded-block-py">        if (self->count != 5 * self->incr) {</span>
<span class="source-lf meta-embedded-block-py">            lf_print_error_and_exit("Failed to receive all five expected inputs.");</span>
<span class="source-lf meta-embedded-block-py">        }</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">federated</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">LoopDistributedCentralized</span><span class="source-lf">(delay(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">)) {</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">left</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Looper</span><span class="source-lf">()</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">right</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Looper</span><span class="source-lf">(incr </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">left</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">out</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">right</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">in_</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">right</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">out</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">left</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">in_</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
