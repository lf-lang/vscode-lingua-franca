<span class="source-lf comment-block-lflang">/**</span>
<span class="source-lf comment-block-lflang"> * This program tests clock synchronization. It checks the clock synchronization</span>
<span class="source-lf comment-block-lflang"> * error and fails if it exceeds a threshold. Note that failures could occur</span>
<span class="source-lf comment-block-lflang"> * here intermittently because clock synchronization accuracy depends on many</span>
<span class="source-lf comment-block-lflang"> * conditions. But the threshold is quite high, so failures should be rare.</span>
<span class="source-lf comment-block-lflang"> * @author Edward A. Lee</span>
<span class="source-lf comment-block-lflang"> </span><span class="source-lf comment-block-lflang">*/</span>
<span class="source-lf comment-line-double-dash-lflang"># reason for failing: clock-sync and clock-sync-options not supported in the</span>
<span class="source-lf comment-line-double-dash-lflang"># python target</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">Python</span><span class="source-lf meta-targetspec-lflang"> {</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">    coordination</span><span class="source-lf meta-targetspec-lflang">: decentralized,</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">    timeout</span><span class="source-lf meta-targetspec-lflang">: </span><span class="source-lf meta-targetspec-lflang constant-numeric-int-lflang">10</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-numeric-lflang">sec</span><span class="source-lf meta-targetspec-lflang">,</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">    clock-sync</span><span class="source-lf meta-targetspec-lflang">: on,  </span><span class="source-lf meta-targetspec-lflang comment-line-double-dash-lflang"># Turn on runtime clock synchronization.</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">    clock-sync-options</span><span class="source-lf meta-targetspec-lflang">: {</span>
<span class="source-lf meta-targetspec-lflang comment-line-double-dash-lflang">        </span><span class="source-lf meta-targetspec-lflang comment-line-double-dash-lflang"># Forces all federates to perform clock sync.</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">        local-federates-on</span><span class="source-lf meta-targetspec-lflang">: </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">true</span><span class="source-lf meta-targetspec-lflang">,</span>
<span class="source-lf meta-targetspec-lflang comment-line-double-dash-lflang">        </span><span class="source-lf meta-targetspec-lflang comment-line-double-dash-lflang"># Collect useful statistics like average network delay</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">        collect-stats</span><span class="source-lf meta-targetspec-lflang">: </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">true</span><span class="source-lf meta-targetspec-lflang">,</span>
<span class="source-lf meta-targetspec-lflang comment-line-double-dash-lflang">        </span><span class="source-lf meta-targetspec-lflang comment-line-double-dash-lflang"># and the standard deviation for the network delay over one clock</span>
<span class="source-lf meta-targetspec-lflang comment-line-double-dash-lflang">        </span><span class="source-lf meta-targetspec-lflang comment-line-double-dash-lflang"># synchronization cycle. Generates a warning if the standard deviation</span>
<span class="source-lf meta-targetspec-lflang comment-line-double-dash-lflang">        </span><span class="source-lf meta-targetspec-lflang comment-line-double-dash-lflang"># is higher than the clock sync guard. Artificially offsets clocks by</span>
<span class="source-lf meta-targetspec-lflang comment-line-double-dash-lflang">        </span><span class="source-lf meta-targetspec-lflang comment-line-double-dash-lflang"># multiples of 200 msec.</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">        test-offset</span><span class="source-lf meta-targetspec-lflang">: </span><span class="source-lf meta-targetspec-lflang constant-numeric-int-lflang">200</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-numeric-lflang">msec</span><span class="source-lf meta-targetspec-lflang">,</span>
<span class="source-lf meta-targetspec-lflang comment-line-double-dash-lflang">        </span><span class="source-lf meta-targetspec-lflang comment-line-double-dash-lflang"># Period with which runtime clock sync is performed.</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">        period</span><span class="source-lf meta-targetspec-lflang">: </span><span class="source-lf meta-targetspec-lflang constant-numeric-int-lflang">5</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-numeric-lflang">msec</span><span class="source-lf meta-targetspec-lflang">,</span>
<span class="source-lf meta-targetspec-lflang comment-line-double-dash-lflang">        </span><span class="source-lf meta-targetspec-lflang comment-line-double-dash-lflang"># Number of messages exchanged to perform clock sync.</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">        trials</span><span class="source-lf meta-targetspec-lflang">: </span><span class="source-lf meta-targetspec-lflang constant-numeric-int-lflang">10</span><span class="source-lf meta-targetspec-lflang">,</span>
<span class="source-lf meta-targetspec-lflang comment-line-double-dash-lflang">        </span><span class="source-lf meta-targetspec-lflang comment-line-double-dash-lflang"># Attenuation applied to runtime clock sync adjustments.</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">        attenuation</span><span class="source-lf meta-targetspec-lflang">: </span><span class="source-lf meta-targetspec-lflang constant-numeric-int-lflang">10</span>
<span class="source-lf meta-targetspec-lflang">    }</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf comment-block-lflang">/**</span><span class="source-lf comment-block-lflang"> Reactor that outputs periodically. </span><span class="source-lf comment-block-lflang">*/</span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Ticker</span><span class="source-lf">(period(</span><span class="source-lf constant-numeric-int-lflang">1600</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">)) {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">output</span><span class="source-lf"> out</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">timer</span><span class="source-lf"> tick(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">, period)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(tick) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> out </span><span class="source-lf meta-embedded-block-py">{=</span><span class="source-lf meta-embedded-block-py"> SET(out, 42); </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf comment-block-lflang">/**</span><span class="source-lf comment-block-lflang"> Print a message when an input arrives. </span><span class="source-lf comment-block-lflang">*/</span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Printer</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf"> in_</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">startup</span><span class="source-lf">) </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">        interval_t offset = _lf_time_physical_clock_offset + _lf_time_test_physical_clock_offset;</span>
<span class="source-lf meta-embedded-block-py">        lf_print("Clock sync error at startup is %lld ns.", offset);</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(in_) </span><span class="source-lf meta-embedded-block-py">{=</span><span class="source-lf meta-embedded-block-py"> lf_print("Received %d.", in->value); </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">shutdown</span><span class="source-lf">) </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">        interval_t offset = _lf_time_physical_clock_offset + _lf_time_test_physical_clock_offset;</span>
<span class="source-lf meta-embedded-block-py">        lf_print("Clock sync error at shutdown is %lld ns.", offset);</span>
<span class="source-lf meta-embedded-block-py">        // Error out if the offset is bigger than 100 msec.</span>
<span class="source-lf meta-embedded-block-py">        if (offset > MSEC(100)) {</span>
<span class="source-lf meta-embedded-block-py">            lf_error_print("Offset exceeds test threshold of 100 msec.");</span>
<span class="source-lf meta-embedded-block-py">            exit(1);</span>
<span class="source-lf meta-embedded-block-py">        }</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Federate</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">source</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Ticker</span><span class="source-lf">()</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">play</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Printer</span><span class="source-lf">()</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">source</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">out</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">play</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">in_</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">federated</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">ClockSync</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">fed1</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Federate</span><span class="source-lf">()</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">fed2</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Federate</span><span class="source-lf">()</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
