<span class="source-lf comment-block-lflang">/**</span>
<span class="source-lf comment-block-lflang"> * Test a sender-receiver network system that is similar to</span>
<span class="source-lf comment-block-lflang"> * DistributedLoopedAction, but it uses a physical action rather than a logical</span>
<span class="source-lf comment-block-lflang"> * action. This also demonstrates the advance-message-interval coordination</span>
<span class="source-lf comment-block-lflang"> * option. This specifies the time period between Time Advance Notice (TAN)</span>
<span class="source-lf comment-block-lflang"> * messages sent to the RTI (a form of null message that must be sent because of</span>
<span class="source-lf comment-block-lflang"> * the physical action). The presence of this option also silences a warning</span>
<span class="source-lf comment-block-lflang"> * about having a physical action that triggers an output.</span>
<span class="source-lf comment-block-lflang"> *</span>
<span class="source-lf comment-block-lflang"> * @author Soroush Bateni</span>
<span class="source-lf comment-block-lflang"> </span><span class="source-lf comment-block-lflang">*/</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">Python</span><span class="source-lf meta-targetspec-lflang"> {</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">    timeout</span><span class="source-lf meta-targetspec-lflang">: </span><span class="source-lf meta-targetspec-lflang constant-numeric-int-lflang">1</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-numeric-lflang">sec</span><span class="source-lf meta-targetspec-lflang">,</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">    keepalive</span><span class="source-lf meta-targetspec-lflang">: </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">true</span>
<span class="source-lf meta-targetspec-lflang">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Sender</span><span class="source-lf">(take_a_break_after(</span><span class="source-lf constant-numeric-int-lflang">10</span><span class="source-lf">), break_interval(</span><span class="source-lf constant-numeric-int-lflang">550</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">)) {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">output</span><span class="source-lf"> out</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">physical</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">action</span><span class="source-lf"> act</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf"> sent_messages(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">startup</span><span class="source-lf">, act) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> act, out </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">        # Send a message on out</span>
<span class="source-lf meta-embedded-block-py">        out.set(self.sent_messages)</span>
<span class="source-lf meta-embedded-block-py">        self.sent_messages += 1</span>
<span class="source-lf meta-embedded-block-py">        if self.sent_messages < self.take_a_break_after:</span>
<span class="source-lf meta-embedded-block-py">            act.schedule(0)</span>
<span class="source-lf meta-embedded-block-py">        else:</span>
<span class="source-lf meta-embedded-block-py">            # Take a break</span>
<span class="source-lf meta-embedded-block-py">            self.sent_messages = 0</span>
<span class="source-lf meta-embedded-block-py">            act.schedule(self.break_interval)</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Receiver</span><span class="source-lf">(take_a_break_after(</span><span class="source-lf constant-numeric-int-lflang">10</span><span class="source-lf">), break_interval(</span><span class="source-lf constant-numeric-int-lflang">550</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">)) {</span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">preamble</span><span class="source-lf"> </span><span class="source-lf meta-embedded-block-py">{=</span><span class="source-lf meta-embedded-block-py"> </span><span class="source-lf meta-embedded-block-py keyword-control-import-python">import</span><span class="source-lf meta-embedded-block-py"> sys </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">input</span><span class="source-lf"> in_</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf"> received_messages(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf"> total_received_messages(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf"> breaks(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">timer</span><span class="source-lf"> t(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">, </span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">)  </span><span class="source-lf comment-line-double-dash-lflang"># This will impact the performance</span>
<span class="source-lf comment-line-double-dash-lflang">    </span><span class="source-lf comment-line-double-dash-lflang"># but forces the logical time to advance Comment this line for a more</span>
<span class="source-lf comment-line-double-dash-lflang">    </span><span class="source-lf comment-line-double-dash-lflang"># sensible log output.</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf"> base_logical_time</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">startup</span><span class="source-lf">) </span><span class="source-lf meta-embedded-block-py">{=</span><span class="source-lf meta-embedded-block-py"> self.base_logical_time = lf.time.logical() </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(in_) </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">        current_tag = lf.tag()</span>
<span class="source-lf meta-embedded-block-py">        print("At tag ({}, {}) received {}".format(</span>
<span class="source-lf meta-embedded-block-py">               current_tag.time - self.base_logical_time,</span>
<span class="source-lf meta-embedded-block-py">               current_tag.microstep,</span>
<span class="source-lf meta-embedded-block-py">               in_.value)</span>
<span class="source-lf meta-embedded-block-py">               )</span>
<span class="source-lf meta-embedded-block-py">        self.total_received_messages += 1</span>
<span class="source-lf meta-embedded-block-py">        if in_.value != self.received_messages:</span>
<span class="source-lf meta-embedded-block-py">            self.sys.stderr.write("Expected {}.".format(self.received_messages - 1))</span>
<span class="source-lf meta-embedded-block-py">            self.sys.exit(1)</span>
<span class="source-lf meta-embedded-block-py">        self.received_messages += 1</span>
<span class="source-lf meta-embedded-block-py"></span>
<span class="source-lf meta-embedded-block-py">        if self.received_messages == self.take_a_break_after:</span>
<span class="source-lf meta-embedded-block-py">            # Sender is taking a break;</span>
<span class="source-lf meta-embedded-block-py">            self.breaks += 1</span>
<span class="source-lf meta-embedded-block-py">            self.received_messages = 0</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(t) </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">        # Do nothing</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">shutdown</span><span class="source-lf">) </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">        if self.breaks != 2 or (self.total_received_messages != ((SEC(1)//self.break_interval)+1) * self.take_a_break_after):</span>
<span class="source-lf meta-embedded-block-py">            self.sys.stderr.write("Test failed. Breaks: {}, Messages: {}.".format(self.breaks, self.total_received_messages))</span>
<span class="source-lf meta-embedded-block-py">            self.sys.exit(1)</span>
<span class="source-lf meta-embedded-block-py">        print("SUCCESS: Successfully received all messages from the sender.")</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">federated</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">DistributedLoopedPhysicalAction</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">sender</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Sender</span><span class="source-lf">()</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">receiver</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Receiver</span><span class="source-lf">()</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">sender</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">out</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">receiver</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">in_</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
