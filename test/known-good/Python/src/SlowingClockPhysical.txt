<span class="source-lf comment-block-lflang">/**</span>
<span class="source-lf comment-block-lflang"> * Output events at physical times at least 100, 300, and 600 msec after the</span>
<span class="source-lf comment-block-lflang"> * start time. This uses a physical action with a minimum interarrival time of</span>
<span class="source-lf comment-block-lflang"> * 100 msec. The reactor increases the interarrival time with each invocation of</span>
<span class="source-lf comment-block-lflang"> * the schedule() function. The timestamps of the events will be exact because</span>
<span class="source-lf comment-block-lflang"> * the physical time at which schedule() is called is always way smaller than</span>
<span class="source-lf comment-block-lflang"> * the time of the last invocation (or start time) plus the minimum interarrival</span>
<span class="source-lf comment-block-lflang"> * time. Hence, the minimum interarrival time always determines the time of the</span>
<span class="source-lf comment-block-lflang"> * next event.</span>
<span class="source-lf comment-block-lflang"> </span><span class="source-lf comment-block-lflang">*/</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">Python</span><span class="source-lf meta-targetspec-lflang"> {</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">    timeout</span><span class="source-lf meta-targetspec-lflang">: </span><span class="source-lf meta-targetspec-lflang constant-numeric-int-lflang">1500</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-numeric-lflang">msec</span>
<span class="source-lf meta-targetspec-lflang">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">main</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">SlowingClockPhysical</span><span class="source-lf"> {</span>
<span class="source-lf comment-line-double-dash-lflang">    </span><span class="source-lf comment-line-double-dash-lflang"># first offset and minimum interarrival time.</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">physical</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">action</span><span class="source-lf"> a(</span><span class="source-lf constant-numeric-int-lflang">100</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">, </span><span class="source-lf constant-numeric-int-lflang">100</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf"> interval(</span><span class="source-lf constant-numeric-int-lflang">100</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf"> expected_time(</span><span class="source-lf constant-numeric-int-lflang">100</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">startup</span><span class="source-lf">) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> a </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">        self.expected_time = MSEC(100)</span>
<span class="source-lf meta-embedded-block-py">        a.schedule(0)</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(a) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> a </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">        elapsed_logical_time = lf.time.logical_elapsed()</span>
<span class="source-lf meta-embedded-block-py">        print("Logical time since start: {:d} nsec.".format(elapsed_logical_time))</span>
<span class="source-lf meta-embedded-block-py">        if elapsed_logical_time < self.expected_time:</span>
<span class="source-lf meta-embedded-block-py">            sys.stderr.write("ERROR: Expected logical time to be at least: {:d} nsec.\n".format(self.expected_time))</span>
<span class="source-lf meta-embedded-block-py">            exit(1)</span>
<span class="source-lf meta-embedded-block-py">        self.interval += MSEC(100)</span>
<span class="source-lf meta-embedded-block-py">        self.expected_time = MSEC(100) + self.interval</span>
<span class="source-lf meta-embedded-block-py">        a.schedule(self.interval)</span>
<span class="source-lf meta-embedded-block-py">        print("Scheduling next to occur after: {:d} nsec.".format(self.interval))</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">shutdown</span><span class="source-lf">) </span><span class="source-lf meta-embedded-block-py">{=</span>
<span class="source-lf meta-embedded-block-py">        if self.expected_time < MSEC(500):</span>
<span class="source-lf meta-embedded-block-py">            sys.stderr.write("ERROR: Expected the next expected time to be at least: 500000000 nsec.\n");</span>
<span class="source-lf meta-embedded-block-py">            sys.stderr.write("It was: {:d} nsec.\n".format(self.expected_time))</span>
<span class="source-lf meta-embedded-block-py">            exit(2)</span>
<span class="source-lf meta-embedded-block-py">        print("Success")</span>
<span class="source-lf meta-embedded-block-py">    </span><span class="source-lf meta-embedded-block-py">=}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
