<span class="source-lf comment-line-double-dash-lflang">// Test logical action with delay.</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">Rust</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">main</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">ActionValues</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf"> r1done:</span><span class="source-lf storage-type-lflang"> bool</span><span class="source-lf">(</span><span class="source-lf constant-language-lflang">false</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf"> r2done:</span><span class="source-lf storage-type-lflang"> bool</span><span class="source-lf">(</span><span class="source-lf constant-language-lflang">false</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">logical</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">action</span><span class="source-lf"> act(</span><span class="source-lf constant-numeric-int-lflang">100</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">):</span><span class="source-lf storage-type-lflang"> i32</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">startup</span><span class="source-lf">) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> act {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">ctx</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">schedule_with_v</span><span class="source-lf">(act, Some(</span><span class="source-lf constant-numeric-int-lflang">100</span><span class="source-lf">), Asap); </span><span class="source-lf comment-line-double-dash-lflang">// scheduled in 100 ms</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// scheduled in 150 ms, value is overwritten</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">ctx</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">schedule_with_v</span><span class="source-lf">(act, Some(</span><span class="source-lf keyword-operator-lflang">-</span><span class="source-lf constant-numeric-int-lflang">100</span><span class="source-lf">), </span><span class="source-lf keyword-control-lflang">after</span><span class="source-lf">!(</span><span class="source-lf constant-numeric-int-lflang">50</span><span class="source-lf"> ms));</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(act) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        println!(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">At {}, received {:?}</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">, </span><span class="source-lf variable-other-constant-reactorinstance-lflang">ctx</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">get_tag</span><span class="source-lf">(), </span><span class="source-lf variable-other-constant-reactorinstance-lflang">ctx</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">get</span><span class="source-lf">(act));</span>
<span class="source-lf"></span>
<span class="source-lf">        if </span><span class="source-lf variable-other-constant-reactorinstance-lflang">ctx</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">get_tag</span><span class="source-lf">() </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> tag!(T0 </span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">100</span><span class="source-lf"> ms) {</span>
<span class="source-lf">            assert_eq!(Some(</span><span class="source-lf constant-numeric-int-lflang">100</span><span class="source-lf">), </span><span class="source-lf variable-other-constant-reactorinstance-lflang">ctx</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">get</span><span class="source-lf">(act));</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">self</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">r1done</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-language-lflang">true</span><span class="source-lf">;</span>
<span class="source-lf">        } else {</span>
<span class="source-lf">            assert_tag_is!(ctx, T0 </span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">150</span><span class="source-lf"> ms);</span>
<span class="source-lf">            assert_eq!(Some(</span><span class="source-lf keyword-operator-lflang">-</span><span class="source-lf constant-numeric-int-lflang">100</span><span class="source-lf">), </span><span class="source-lf variable-other-constant-reactorinstance-lflang">ctx</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">get</span><span class="source-lf">(act));</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">self</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">r2done</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-language-lflang">true</span><span class="source-lf">;</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">shutdown</span><span class="source-lf">) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        assert!(</span><span class="source-lf variable-other-constant-reactorinstance-lflang">self</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">r1done</span><span class="source-lf"> && </span><span class="source-lf variable-other-constant-reactorinstance-lflang">self</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">r2done</span><span class="source-lf">);</span>
<span class="source-lf">        println!(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Success</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
