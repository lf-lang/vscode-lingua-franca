<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">Rust</span>
<span class="source-lf"></span>
<span class="source-lf comment-line-double-dash-lflang">// This test passes if it is successfully compiled into valid target code.</span>
<span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Foo</span><span class="source-lf">(</span>
<span class="source-lf">    x:</span><span class="source-lf storage-type-lflang"> i32</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">),</span>
<span class="source-lf">    y:</span><span class="source-lf storage-type-lflang"> time</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">),  </span><span class="source-lf comment-line-double-dash-lflang">// Units are missing but not required</span>
<span class="source-lf">    z(</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">),  </span><span class="source-lf comment-line-double-dash-lflang">// Type is missing but not required</span>
<span class="source-lf">    p:</span><span class="source-lf storage-type-lflang"> i32</span><span class="source-lf">[](</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">, </span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf">, </span><span class="source-lf constant-numeric-int-lflang">3</span><span class="source-lf">, </span><span class="source-lf constant-numeric-int-lflang">4</span><span class="source-lf">),  </span><span class="source-lf comment-line-double-dash-lflang">// List of integers</span>
<span class="source-lf">    p2:</span><span class="source-lf storage-type-lflang"> i32</span><span class="source-lf">[]({</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> vec![</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">] </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}),  </span><span class="source-lf comment-line-double-dash-lflang">// List of integers with single element</span>
<span class="source-lf comment-line-double-dash-lflang">    </span><span class="source-lf comment-line-double-dash-lflang">// todo // p2: i32[](1), // List of integers with single element p3:</span>
<span class="source-lf comment-line-double-dash-lflang">    </span><span class="source-lf comment-line-double-dash-lflang">// i32[](), // Empty list of integers List of time values</span>
<span class="source-lf">    q:</span><span class="source-lf entity-name-type-lflang"> Vec</span><span class="source-lf"><Duration>(</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">, </span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">, </span><span class="source-lf constant-numeric-int-lflang">3</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">),</span>
<span class="source-lf">    g:</span><span class="source-lf storage-type-lflang"> time</span><span class="source-lf">[](</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">, </span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">)  </span><span class="source-lf comment-line-double-dash-lflang">// List of time values</span>
<span class="source-lf">) {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf"> s:</span><span class="source-lf storage-type-lflang"> time</span><span class="source-lf">(y)  </span><span class="source-lf comment-line-double-dash-lflang">// Reference to explicitly typed time parameter</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf"> t:</span><span class="source-lf storage-type-lflang"> time</span><span class="source-lf">(z)  </span><span class="source-lf comment-line-double-dash-lflang">// Reference to implicitly typed time parameter</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf"> v:</span><span class="source-lf storage-type-lflang"> bool</span><span class="source-lf">  </span><span class="source-lf comment-line-double-dash-lflang">// Uninitialized boolean state variable</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf"> w:</span><span class="source-lf storage-type-lflang"> time</span><span class="source-lf">  </span><span class="source-lf comment-line-double-dash-lflang">// Uninitialized time state variable</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">timer</span><span class="source-lf"> tick(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">)  </span><span class="source-lf comment-line-double-dash-lflang">// Units missing but not required</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">timer</span><span class="source-lf"> tock(</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">sec</span><span class="source-lf">)  </span><span class="source-lf comment-line-double-dash-lflang">// Implicit type time</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">timer</span><span class="source-lf"> toe(z)  </span><span class="source-lf comment-line-double-dash-lflang">// Implicit type time</span>
<span class="source-lf">    </span><span class="source-lf comment-block-lflang">/**</span>
<span class="source-lf comment-block-lflang">     * fixme following should be equivalent:</span>
<span class="source-lf comment-block-lflang">     * - state baz(p);</span>
<span class="source-lf comment-block-lflang">     * - state baz: i32[4](p);</span>
<span class="source-lf comment-block-lflang">     * - state baz: i32[4]({=p=});</span>
<span class="source-lf comment-block-lflang">     *</span>
<span class="source-lf comment-block-lflang">     * because the initializer is the same modulo fat braces</span>
<span class="source-lf comment-block-lflang">     </span><span class="source-lf comment-block-lflang">*/</span>
<span class="source-lf comment-line-double-dash-lflang">    </span><span class="source-lf comment-line-double-dash-lflang">// state baz(p); // Implicit type i32[] fixme this interplays badly with</span>
<span class="source-lf comment-line-double-dash-lflang">    </span><span class="source-lf comment-line-double-dash-lflang">// syntax for array init Implicit type time</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf"> period(z)</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf"> times:</span><span class="source-lf entity-name-type-lflang"> Vec</span><span class="source-lf"><Vec<{</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> Duration </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}>>(q, g)  </span><span class="source-lf comment-line-double-dash-lflang">// a list of lists</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf comment-block-lflang">/**</span>
<span class="source-lf comment-block-lflang">     * reactor Foo (p: i32[](1, 2)) { state baz(p); // Implicit type i32[] state</span>
<span class="source-lf comment-block-lflang">     * baz({=p=}); // Implicit type i32[] }</span>
<span class="source-lf comment-block-lflang">     </span><span class="source-lf comment-block-lflang">*/</span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(tick) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// Target code</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">main</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">NativeListsAndTimes</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">foo</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">Foo</span><span class="source-lf">()</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
