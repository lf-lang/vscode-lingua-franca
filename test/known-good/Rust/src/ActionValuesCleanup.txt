<span class="source-lf comment-line-double-dash-lflang">// Test that scheduling actions drops the previous value if any</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">Rust</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">main</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">ActionValuesCleanup</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">preamble</span><span class="source-lf"> {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        use </span><span class="source-lf variable-other-constant-reactorinstance-lflang">std</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-constant-reactorinstance-lflang">sync</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-constant-reactorinstance-lflang">atomic</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">AtomicBool</span><span class="source-lf">;</span>
<span class="source-lf">        use </span><span class="source-lf variable-other-constant-reactorinstance-lflang">std</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-constant-reactorinstance-lflang">sync</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-constant-reactorinstance-lflang">atomic</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">Ordering</span><span class="source-lf">;</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// set to true when destructor is called</span>
<span class="source-lf">        static mut DROPPED:</span><span class="source-lf entity-name-type-lflang"> AtomicBool</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">AtomicBool</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf keyword-operator-new-lflang">new</span><span class="source-lf">(</span><span class="source-lf constant-language-lflang">false</span><span class="source-lf">);</span>
<span class="source-lf"></span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">#[derive(Clone, Debug)]</span>
<span class="source-lf">        struct FooDrop { }</span>
<span class="source-lf">        impl </span><span class="source-lf variable-other-constant-reactorinstance-lflang">std</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-constant-reactorinstance-lflang">ops</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">Drop</span><span class="source-lf"> for FooDrop {</span>
<span class="source-lf">            fn drop(&mut self) {</span>
<span class="source-lf">                unsafe {</span>
<span class="source-lf">                    </span><span class="source-lf variable-other-constant-reactorinstance-lflang">DROPPED</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">store</span><span class="source-lf">(</span><span class="source-lf constant-language-lflang">true</span><span class="source-lf">, </span><span class="source-lf variable-other-constant-reactorinstance-lflang">Ordering</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">SeqCst</span><span class="source-lf">);</span>
<span class="source-lf">                }</span>
<span class="source-lf">            }</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">logical</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">action</span><span class="source-lf"> act:</span><span class="source-lf entity-name-type-lflang"> FooDrop</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf"> count:</span><span class="source-lf storage-type-lflang"> u32</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">startup</span><span class="source-lf">) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> act {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">ctx</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">schedule_with_v</span><span class="source-lf">(act, Some(FooDrop { }), Asap)</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(act) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> act {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">ctx</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">use_ref</span><span class="source-lf">(act, |v| println!(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">{:?}</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">, v));</span>
<span class="source-lf">        if </span><span class="source-lf variable-other-constant-reactorinstance-lflang">self</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">count</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf"> {</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">self</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">count</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">;</span>
<span class="source-lf">            assert!(</span><span class="source-lf variable-other-constant-reactorinstance-lflang">ctx</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">is_present</span><span class="source-lf">(act));</span>
<span class="source-lf">            assert!(</span><span class="source-lf variable-other-constant-reactorinstance-lflang">ctx</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">use_ref</span><span class="source-lf">(act, |v| </span><span class="source-lf variable-other-constant-reactorinstance-lflang">v</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">is_some</span><span class="source-lf">()));</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">ctx</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">schedule</span><span class="source-lf">(act, Asap);</span>
<span class="source-lf">        } else if </span><span class="source-lf variable-other-constant-reactorinstance-lflang">self</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">count</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf"> {</span>
<span class="source-lf">            assert!(</span><span class="source-lf variable-other-constant-reactorinstance-lflang">ctx</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">is_present</span><span class="source-lf">(act));</span>
<span class="source-lf">            assert!(</span><span class="source-lf variable-other-constant-reactorinstance-lflang">ctx</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">use_ref</span><span class="source-lf">(act, |v| </span><span class="source-lf variable-other-constant-reactorinstance-lflang">v</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">is_none</span><span class="source-lf">()));</span>
<span class="source-lf">            assert!(unsafe { </span><span class="source-lf variable-other-constant-reactorinstance-lflang">DROPPED</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">load</span><span class="source-lf">(</span><span class="source-lf variable-other-constant-reactorinstance-lflang">Ordering</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">SeqCst</span><span class="source-lf">) });</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">self</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">count</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf">;</span>
<span class="source-lf">        } else {</span>
<span class="source-lf">            unreachable!();</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">shutdown</span><span class="source-lf">) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        assert_eq!(</span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf">, </span><span class="source-lf variable-other-constant-reactorinstance-lflang">self</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">count</span><span class="source-lf">, </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">expected 2 invocations</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">);</span>
<span class="source-lf">        println!(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">success</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">);</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
