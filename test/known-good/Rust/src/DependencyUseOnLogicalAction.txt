<span class="source-lf comment-block-lflang">/**</span><span class="source-lf comment-block-lflang"> Test that use-dependencies may be declared on logical actions and timers. </span><span class="source-lf comment-block-lflang">*/</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">Rust</span><span class="source-lf meta-targetspec-lflang"> {</span>
<span class="source-lf meta-targetspec-lflang variable-parameter-lflang">    timeout</span><span class="source-lf meta-targetspec-lflang">: </span><span class="source-lf meta-targetspec-lflang constant-numeric-int-lflang">10</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-numeric-lflang">msec</span>
<span class="source-lf meta-targetspec-lflang">}</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">main</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">logical</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">action</span><span class="source-lf"> clock:</span><span class="source-lf storage-type-lflang"> u32</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">logical</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">action</span><span class="source-lf"> a</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">timer</span><span class="source-lf"> t(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">, </span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf"> tick:</span><span class="source-lf storage-type-lflang"> u32</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">0</span><span class="source-lf">)</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">startup</span><span class="source-lf">) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> clock, a {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">ctx</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">schedule</span><span class="source-lf">(a, </span><span class="source-lf keyword-control-lflang">after</span><span class="source-lf">!(</span><span class="source-lf constant-numeric-int-lflang">3</span><span class="source-lf"> ms)); </span><span class="source-lf comment-line-double-dash-lflang">// out of order on purpose</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">ctx</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">schedule</span><span class="source-lf">(a, </span><span class="source-lf keyword-control-lflang">after</span><span class="source-lf">!(</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf"> ms));</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">ctx</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">schedule</span><span class="source-lf">(a, </span><span class="source-lf keyword-control-lflang">after</span><span class="source-lf">!(</span><span class="source-lf constant-numeric-int-lflang">5</span><span class="source-lf"> ms));</span>
<span class="source-lf"></span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// not scheduled on milli 1 (action is)</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">ctx</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">schedule_with_v</span><span class="source-lf">(clock, Some(</span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf">), </span><span class="source-lf keyword-control-lflang">after</span><span class="source-lf">!(</span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf"> ms));</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">ctx</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">schedule_with_v</span><span class="source-lf">(clock, Some(</span><span class="source-lf constant-numeric-int-lflang">3</span><span class="source-lf">), </span><span class="source-lf keyword-control-lflang">after</span><span class="source-lf">!(</span><span class="source-lf constant-numeric-int-lflang">3</span><span class="source-lf"> ms));</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">ctx</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">schedule_with_v</span><span class="source-lf">(clock, Some(</span><span class="source-lf constant-numeric-int-lflang">4</span><span class="source-lf">), </span><span class="source-lf keyword-control-lflang">after</span><span class="source-lf">!(</span><span class="source-lf constant-numeric-int-lflang">4</span><span class="source-lf"> ms));</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">ctx</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">schedule_with_v</span><span class="source-lf">(clock, Some(</span><span class="source-lf constant-numeric-int-lflang">5</span><span class="source-lf">), </span><span class="source-lf keyword-control-lflang">after</span><span class="source-lf">!(</span><span class="source-lf constant-numeric-int-lflang">5</span><span class="source-lf"> ms));</span>
<span class="source-lf comment-line-double-dash-lflang">        </span><span class="source-lf comment-line-double-dash-lflang">// not scheduled on milli 6 (timer is)</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(clock) a, t {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        match </span><span class="source-lf variable-other-constant-reactorinstance-lflang">ctx</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">get</span><span class="source-lf">(clock) {</span>
<span class="source-lf">            Some(</span><span class="source-lf constant-numeric-int-lflang">2</span><span class="source-lf">) | Some(</span><span class="source-lf constant-numeric-int-lflang">4</span><span class="source-lf">) </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">> {</span>
<span class="source-lf">                assert!(</span><span class="source-lf variable-other-constant-reactorinstance-lflang">ctx</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">is_present</span><span class="source-lf">(t));   </span><span class="source-lf comment-line-double-dash-lflang">// t is there on even millis</span>
<span class="source-lf">                assert!(!</span><span class="source-lf variable-other-constant-reactorinstance-lflang">ctx</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">is_present</span><span class="source-lf">(a)); </span><span class="source-lf comment-line-double-dash-lflang">//</span>
<span class="source-lf">            },</span>
<span class="source-lf">            Some(</span><span class="source-lf constant-numeric-int-lflang">3</span><span class="source-lf">) | Some(</span><span class="source-lf constant-numeric-int-lflang">5</span><span class="source-lf">) </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">> {</span>
<span class="source-lf">                assert!(!</span><span class="source-lf variable-other-constant-reactorinstance-lflang">ctx</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">is_present</span><span class="source-lf">(t));</span>
<span class="source-lf">                assert!(</span><span class="source-lf variable-other-constant-reactorinstance-lflang">ctx</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">is_present</span><span class="source-lf">(a));</span>
<span class="source-lf">            },</span>
<span class="source-lf">            it </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">> unreachable!(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">{:?}</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">, it)</span>
<span class="source-lf">        }</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">self</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">tick</span><span class="source-lf"> </span><span class="source-lf keyword-operator-lflang">+</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">;</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">shutdown</span><span class="source-lf">) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        assert_eq!(</span><span class="source-lf variable-other-constant-reactorinstance-lflang">self</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">tick</span><span class="source-lf">, </span><span class="source-lf constant-numeric-int-lflang">4</span><span class="source-lf">);</span>
<span class="source-lf">        println!(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">success</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">);</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
