<span class="source-lf comment-line-double-dash-lflang">// Check that a state variable can have a statically initialized struct as a</span>
<span class="source-lf comment-line-double-dash-lflang">// value. Check how preambles work</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">Rust</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">main</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> </span><span class="source-lf entity-name-type-lflang">StructAsState</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">preamble</span><span class="source-lf"> {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        struct Hello {</span>
<span class="source-lf">            name:</span><span class="source-lf entity-name-type-lflang"> String</span><span class="source-lf">,</span>
<span class="source-lf">            value:</span><span class="source-lf storage-type-lflang"> i32</span><span class="source-lf">,</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">    </span><span class="source-lf comment-block-lflang">/**</span>
<span class="source-lf comment-block-lflang">     * notice this uses parentheses todo</span>
<span class="source-lf comment-block-lflang">     * - state s: Hello(name= "Earth".into(), value= 42);</span>
<span class="source-lf comment-block-lflang">     * - state s: Hello(name: "Earth".into(), value: 42);</span>
<span class="source-lf comment-block-lflang">     * - state s: Hello { name: "Earth".into(), value: 42 };</span>
<span class="source-lf comment-block-lflang">     </span><span class="source-lf comment-block-lflang">*/</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">state</span><span class="source-lf"> s:</span><span class="source-lf entity-name-type-lflang"> Hello</span><span class="source-lf">({</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> Hello { name: </span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">Earth</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf">into(), value:</span><span class="source-lf storage-type-lflang"> 42</span><span class="source-lf"> } </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">})</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">startup</span><span class="source-lf">) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        println!(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">State s.name=</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\"</span><span class="source-lf string-quoted-double-lflang">{}</span><span class="source-lf string-quoted-double-lflang constant-character-escape">\"</span><span class="source-lf string-quoted-double-lflang">, s.value={}.</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">, </span><span class="source-lf variable-other-constant-reactorinstance-lflang">self</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-constant-reactorinstance-lflang">s</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">name</span><span class="source-lf">, </span><span class="source-lf variable-other-constant-reactorinstance-lflang">self</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-constant-reactorinstance-lflang">s</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">value</span><span class="source-lf">);</span>
<span class="source-lf">        if </span><span class="source-lf variable-other-constant-reactorinstance-lflang">self</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-constant-reactorinstance-lflang">s</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">value</span><span class="source-lf"> !</span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf constant-numeric-int-lflang">42</span><span class="source-lf"> {</span>
<span class="source-lf">            eprintln!(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">FAILED: Expected 42.</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">);</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">std</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-constant-reactorinstance-lflang">process</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">exit</span><span class="source-lf">(</span><span class="source-lf constant-numeric-int-lflang">1</span><span class="source-lf">);</span>
<span class="source-lf">        }</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
