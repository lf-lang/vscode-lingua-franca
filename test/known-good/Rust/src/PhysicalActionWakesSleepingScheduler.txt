<span class="source-lf comment-line-double-dash-lflang">// Tests that, given a logical event scheduled far away in the future (which</span>
<span class="source-lf comment-line-double-dash-lflang">// puts the scheduler to sleep), and a physical action being triggered</span>
<span class="source-lf comment-line-double-dash-lflang">// asynchronously during that sleep time, the scheduler wakes up and processes</span>
<span class="source-lf comment-line-double-dash-lflang">// the physical action before the logical action. This test is unfortunately not</span>
<span class="source-lf comment-line-double-dash-lflang">// very reliable, as the sleeping thread may wake up very late depending on the</span>
<span class="source-lf comment-line-double-dash-lflang">// platform and the weather. The test has already failed in CI on macos, because</span>
<span class="source-lf comment-line-double-dash-lflang">// the action was triggered at (T0+135ms), that is, 115ms later than the</span>
<span class="source-lf comment-line-double-dash-lflang">// expected wake up time (T0+20ms).</span>
<span class="source-lf meta-targetspec-lflang keyword-control-lflang">target</span><span class="source-lf meta-targetspec-lflang"> </span><span class="source-lf meta-targetspec-lflang constant-language-lflang">Rust</span>
<span class="source-lf"></span>
<span class="source-lf storage-modifier-lflang">main</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">reactor</span><span class="source-lf"> {</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">timer</span><span class="source-lf"> t(</span><span class="source-lf constant-numeric-int-lflang">250</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">)  </span><span class="source-lf comment-line-double-dash-lflang">// this is unused but important</span>
<span class="source-lf">    </span><span class="source-lf storage-modifier-lflang">physical</span><span class="source-lf"> </span><span class="source-lf storage-modifier-lflang">action</span><span class="source-lf"> act:</span><span class="source-lf storage-type-lflang"> u32</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(</span><span class="source-lf support-variable-lflang">startup</span><span class="source-lf">) </span><span class="source-lf keyword-operator-lflang">-></span><span class="source-lf"> act {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        let act </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf"> </span><span class="source-lf variable-other-constant-reactorinstance-lflang">act</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">clone</span><span class="source-lf">();</span>
<span class="source-lf">        </span><span class="source-lf variable-other-constant-reactorinstance-lflang">ctx</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">spawn_physical_thread</span><span class="source-lf">(move |link| {</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">std</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-constant-reactorinstance-lflang">thread</span><span class="source-lf keyword-operator-lflang">::</span><span class="source-lf variable-other-lflang">sleep</span><span class="source-lf">(delay!(</span><span class="source-lf constant-numeric-int-lflang">20</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">));</span>
<span class="source-lf">            </span><span class="source-lf variable-other-constant-reactorinstance-lflang">link</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">schedule_physical</span><span class="source-lf">(&act, Asap);</span>
<span class="source-lf">        });</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf"></span>
<span class="source-lf">    </span><span class="source-lf keyword-control-lflang">reaction</span><span class="source-lf">(act) {</span><span class="source-lf keyword-operator-lflang">=</span>
<span class="source-lf">        println!(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">---- Invocation at {}</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">, </span><span class="source-lf variable-other-constant-reactorinstance-lflang">ctx</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">get_tag</span><span class="source-lf">());</span>
<span class="source-lf"></span>
<span class="source-lf">        assert!(</span><span class="source-lf variable-other-constant-reactorinstance-lflang">ctx</span><span class="source-lf keyword-operator-lflang">.</span><span class="source-lf variable-other-lflang">get_elapsed_logical_time</span><span class="source-lf">() < delay!(</span><span class="source-lf constant-numeric-int-lflang">250</span><span class="source-lf"> </span><span class="source-lf constant-numeric-lflang">msec</span><span class="source-lf">));</span>
<span class="source-lf">        println!(</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf string-quoted-double-lflang">success</span><span class="source-lf string-quoted-double-lflang">"</span><span class="source-lf">)</span>
<span class="source-lf">    </span><span class="source-lf keyword-operator-lflang">=</span><span class="source-lf">}</span>
<span class="source-lf">}</span>
<span class="source-lf"></span>
